2025-05-16 18:16:16 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-16 18:16:16 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-16 18:16:16 - app.main - INFO - Registering routers with prefix /api
2025-05-16 18:16:17 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-16 18:16:17 - app.main - INFO - MongoDB connection verified successfully
2025-05-16 18:16:17 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-16 18:16:17 - app.main - INFO - All database indexes verified
2025-05-16 18:16:17 - app.main - INFO - Server started successfully!
2025-05-16 18:16:17 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-16 18:23:37 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-16 18:24:00 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-16 18:24:00 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-16 18:24:00 - app.main - INFO - Registering routers with prefix /api
2025-05-16 18:24:00 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-16 18:24:00 - app.main - INFO - MongoDB connection verified successfully
2025-05-16 18:24:00 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-16 18:24:01 - app.main - INFO - All database indexes verified
2025-05-16 18:24:01 - app.main - INFO - Server started successfully!
2025-05-16 18:24:01 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-18 11:32:11 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-18 11:32:11 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-18 11:32:11 - app.main - INFO - Registering routers with prefix /api
2025-05-18 11:32:11 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-18 11:32:11 - app.main - INFO - MongoDB connection verified successfully
2025-05-18 11:32:12 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-18 11:32:12 - app.main - INFO - All database indexes verified
2025-05-18 11:32:12 - app.main - INFO - Server started successfully!
2025-05-18 11:32:12 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-18 11:33:43 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-18 11:34:07 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-18 11:34:07 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-18 11:34:07 - app.main - INFO - Registering routers with prefix /api
2025-05-18 11:34:07 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-18 11:34:07 - app.main - INFO - MongoDB connection verified successfully
2025-05-18 11:34:07 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-18 11:34:07 - app.main - INFO - All database indexes verified
2025-05-18 11:34:07 - app.main - INFO - Server started successfully!
2025-05-18 11:34:07 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-18 11:38:35 - app.main - INFO - Request: POST /api/asset-categories/
2025-05-18 11:38:35 - app.main - WARNING - Request failed: POST /api/asset-categories/ - Status: 404
2025-05-18 11:42:26 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-18 11:43:44 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-18 11:43:44 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-18 11:43:44 - app.main - INFO - Registering routers with prefix /api
2025-05-18 11:43:44 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-18 11:43:44 - app.main - INFO - MongoDB connection verified successfully
2025-05-18 11:43:44 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-18 11:43:44 - app.main - INFO - All database indexes verified
2025-05-18 11:43:44 - app.main - INFO - Server started successfully!
2025-05-18 11:43:44 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-18 11:44:05 - app.main - INFO - Request: POST /api/asset-categories/
2025-05-18 11:44:05 - app.routers.asset_categories - INFO - Creating asset category: Laptops
2025-05-18 11:44:05 - app.services.asset_category_service - INFO - Creating category: Laptops
2025-05-18 11:44:05 - app.services.asset_category_service - ERROR - Error creating category: 'Collection' object is not callable. If you meant to call the 'find_one' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 176, in create_asset_category
    existing = db.find_one({"category_name": category.category_name})
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find_one' method on a 'Database' object it is failing because no such method exists.
2025-05-18 11:44:05 - app.routers.asset_categories - ERROR - Failed to create category: 'Collection' object is not callable. If you meant to call the 'find_one' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 103, in create_new_asset_category
    created_category = create_asset_category(db, category)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 176, in create_asset_category
    existing = db.find_one({"category_name": category.category_name})
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find_one' method on a 'Database' object it is failing because no such method exists.
2025-05-18 11:44:05 - app.main - WARNING - Request failed: POST /api/asset-categories/ - Status: 500
2025-05-18 11:48:11 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-18 11:50:31 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-18 11:50:31 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-18 11:50:31 - app.main - INFO - Registering routers with prefix /api
2025-05-18 11:50:31 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-18 11:50:31 - app.main - INFO - MongoDB connection verified successfully
2025-05-18 11:50:31 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-18 11:50:31 - app.main - INFO - All database indexes verified
2025-05-18 11:50:31 - app.main - INFO - Server started successfully!
2025-05-18 11:50:31 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-18 11:50:36 - app.main - INFO - Request: POST /api/asset-categories/
2025-05-18 11:50:36 - app.routers.asset_categories - INFO - Creating asset category: Laptops
2025-05-18 11:50:36 - app.services.asset_category_service - INFO - Creating category: Laptops
2025-05-18 11:50:36 - app.services.asset_category_service - INFO - Created category with ID: 6dea1a4c-e556-4a42-a0a9-f6a42d39eb9f
2025-05-18 12:16:23 - app.main - INFO - Request: POST /api/asset-categories/
2025-05-18 12:16:23 - app.routers.asset_categories - INFO - Creating asset category: Laptops
2025-05-18 12:16:23 - app.services.asset_category_service - INFO - Creating category: Laptops
2025-05-18 12:16:24 - app.services.asset_category_service - INFO - Created category with ID: 958d338a-8828-495f-88c7-04d52049cb8a
2025-05-18 12:16:48 - app.main - INFO - Request: POST /api/employees/
2025-05-18 12:16:48 - app.routers.employees - INFO - Creating employee: EMP001
2025-05-18 12:16:48 - app.services.employee_service - INFO - Creating employee: Alice Smith
2025-05-18 12:16:48 - app.services.employee_service - ERROR - Error creating employee: 'EmployeeCreate' object has no attribute 'email'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\employee_service.py", line 233, in create_employee
    if employee.email:
       ^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'EmployeeCreate' object has no attribute 'email'
2025-05-18 12:16:48 - app.routers.employees - ERROR - Failed to create employee: 'EmployeeCreate' object has no attribute 'email'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\employees.py", line 164, in create_new_employee
    created_employee = create_employee(collection, employee)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\employee_service.py", line 233, in create_employee
    if employee.email:
       ^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'EmployeeCreate' object has no attribute 'email'
2025-05-18 12:16:48 - app.main - WARNING - Request failed: POST /api/employees/ - Status: 500
2025-05-18 12:22:51 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-18 12:23:08 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-18 12:23:08 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-18 12:23:08 - app.main - INFO - Registering routers with prefix /api
2025-05-18 12:23:08 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-18 12:23:08 - app.main - INFO - MongoDB connection verified successfully
2025-05-18 12:23:08 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-18 12:23:08 - app.main - INFO - All database indexes verified
2025-05-18 12:23:08 - app.main - INFO - Server started successfully!
2025-05-18 12:23:08 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-18 12:23:16 - app.main - INFO - Request: POST /api/employees/
2025-05-18 12:23:16 - app.routers.employees - INFO - Creating employee: EMP001
2025-05-18 12:23:16 - app.services.employee_service - INFO - Creating employee: Alice Smith
2025-05-18 12:23:17 - app.services.employee_service - INFO - Created employee with ID: 3a142936-dcb9-4962-9c9b-94995d6eb1f3
2025-05-18 12:31:43 - app.main - INFO - Request: POST /api/asset-items/
2025-05-18 12:31:44 - app.routers.asset_items - INFO - Creating asset item: Dell XPS 13
2025-05-18 12:31:44 - app.routers.asset_items - ERROR - Failed to create asset item: 'AssetItemCreate' object has no attribute 'asset_name'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_items.py", line 177, in create_new_asset_item
    created_item = create_asset_item(collection, item)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_item_service.py", line 141, in create_asset_item
    logger.info(f"Creating asset: {asset.asset_name}")
                                   ^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssetItemCreate' object has no attribute 'asset_name'. Did you mean: 'asset_tag'?
2025-05-18 12:31:44 - app.main - WARNING - Request failed: POST /api/asset-items/ - Status: 500
2025-05-18 12:43:03 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-18 12:43:14 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-18 12:43:14 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-18 12:43:14 - app.main - INFO - Registering routers with prefix /api
2025-05-18 12:43:14 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-18 12:43:14 - app.main - INFO - MongoDB connection verified successfully
2025-05-18 12:43:15 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-18 12:43:15 - app.main - INFO - All database indexes verified
2025-05-18 12:43:15 - app.main - INFO - Server started successfully!
2025-05-18 12:43:15 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-18 12:44:06 - app.main - INFO - Request: POST /api/asset-items/
2025-05-18 12:44:06 - app.routers.asset_items - INFO - Creating asset item: Dell XPS 13
2025-05-18 12:44:06 - app.routers.asset_items - ERROR - Failed to create asset item: 'AssetItemCreate' object has no attribute 'asset_name'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_items.py", line 177, in create_new_asset_item
    created_item = create_asset_item(collection, item)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_item_service.py", line 141, in create_asset_item
    logger.info(f"Creating asset: {asset.name}")
                                   ^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssetItemCreate' object has no attribute 'asset_name'. Did you mean: 'asset_tag'?
2025-05-18 12:44:06 - app.main - WARNING - Request failed: POST /api/asset-items/ - Status: 500
2025-05-18 12:45:26 - app.main - INFO - Request: POST /api/asset-items/
2025-05-18 12:45:26 - app.routers.asset_items - INFO - Creating asset item: Dell XPS 13
2025-05-18 12:45:26 - app.routers.asset_items - ERROR - Failed to create asset item: 'AssetItemCreate' object has no attribute 'asset_name'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_items.py", line 177, in create_new_asset_item
    created_item = create_asset_item(collection, item)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_item_service.py", line 141, in create_asset_item
    logger.info(f"Creating asset: {asset.name}")
                                   ^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssetItemCreate' object has no attribute 'asset_name'. Did you mean: 'asset_tag'?
2025-05-18 12:45:26 - app.main - WARNING - Request failed: POST /api/asset-items/ - Status: 500
2025-05-18 12:48:07 - app.main - INFO - Request: POST /api/asset-items/
2025-05-18 12:48:07 - app.routers.asset_items - INFO - Creating asset item: Dell XPS 13
2025-05-18 12:48:07 - app.routers.asset_items - ERROR - Failed to create asset item: 'AssetItemCreate' object has no attribute 'asset_name'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_items.py", line 177, in create_new_asset_item
    created_item = create_asset_item(collection, item)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_item_service.py", line 141, in create_asset_item
    logger.info(f"Creating asset: {asset.name}")
                                   ^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssetItemCreate' object has no attribute 'asset_name'. Did you mean: 'asset_tag'?
2025-05-18 12:48:08 - app.main - WARNING - Request failed: POST /api/asset-items/ - Status: 500
2025-05-18 12:49:54 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-18 12:50:08 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-18 12:50:08 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-18 12:50:08 - app.main - INFO - Registering routers with prefix /api
2025-05-18 12:50:09 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-18 12:50:09 - app.main - INFO - MongoDB connection verified successfully
2025-05-18 12:50:09 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-18 12:50:09 - app.main - INFO - All database indexes verified
2025-05-18 12:50:09 - app.main - INFO - Server started successfully!
2025-05-18 12:50:09 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-18 12:50:14 - app.main - INFO - Request: POST /api/asset-items/
2025-05-18 12:50:14 - app.routers.asset_items - INFO - Creating asset item: Dell XPS 13
2025-05-18 12:50:14 - app.services.asset_item_service - INFO - Creating asset: Dell XPS 13
2025-05-18 12:50:14 - app.services.asset_item_service - INFO - Created asset with ID: 70ee52cb-1753-4987-8b74-3c0567718a2d
2025-05-18 19:24:53 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-18 19:24:53 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-18 19:24:53 - app.main - INFO - Registering routers with prefix /api
2025-05-18 19:24:53 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-18 19:24:53 - app.main - INFO - MongoDB connection verified successfully
2025-05-18 19:24:53 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-18 19:24:53 - app.main - INFO - All database indexes verified
2025-05-18 19:24:53 - app.main - INFO - Server started successfully!
2025-05-18 19:24:53 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-18 19:29:40 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-18 19:29:40 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-18 19:29:40 - app.main - INFO - Registering routers with prefix /api
2025-05-18 19:29:41 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-18 19:29:41 - app.main - INFO - MongoDB connection verified successfully
2025-05-18 19:29:41 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-18 19:29:41 - app.main - INFO - All database indexes verified
2025-05-18 19:29:41 - app.main - INFO - Server started successfully!
2025-05-18 19:29:41 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-18 19:34:32 - app.main - INFO - Request: POST /api/maintenance-history
2025-05-18 19:34:32 - app.main - WARNING - Request failed: POST /api/maintenance-history - Status: 404
2025-05-18 19:36:40 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-18 19:36:50 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-18 19:36:50 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-18 19:36:50 - app.main - INFO - Registering routers with prefix /api
2025-05-18 19:36:51 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-18 19:36:51 - app.main - INFO - MongoDB connection verified successfully
2025-05-18 19:36:51 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-18 19:36:51 - app.main - INFO - All database indexes verified
2025-05-18 19:36:51 - app.main - INFO - Server started successfully!
2025-05-18 19:36:51 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-18 19:37:12 - app.main - INFO - Request: POST /api/maintenance-history
2025-05-18 19:37:12 - app.routers.maintenance_history - INFO - Creating maintenance history entry for asset 70ee52cb-1753-4987-8b74-3c0567718a2d
2025-05-18 19:40:56 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-18 19:41:07 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-18 19:41:07 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-18 19:41:07 - app.main - INFO - Registering routers with prefix /api
2025-05-18 19:41:07 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-18 19:41:07 - app.main - INFO - MongoDB connection verified successfully
2025-05-18 19:41:07 - app.main - INFO - Creating collection: departments
2025-05-18 19:41:07 - app.main - INFO - Creating collection: vendors
2025-05-18 19:41:07 - app.main - INFO - Creating collection: locations
2025-05-18 19:41:08 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-18 19:41:08 - app.main - INFO - All database indexes verified
2025-05-18 19:41:08 - app.main - INFO - Server started successfully!
2025-05-18 19:41:08 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-18 20:04:21 - app.main - INFO - Request: POST /api/documents
2025-05-18 20:04:22 - app.main - INFO - Request: POST /api/documents/
2025-05-18 20:04:22 - app.routers.documents - INFO - POST /documents/
2025-05-18 20:04:22 - app.services.document_service - INFO - Creating document - asset_id: 70ee52cb-1753-4987-8b74-3c0567718a2d, employee_id: None, type: DocumentType.INVOICE
2025-05-18 20:04:22 - app.services.document_service - WARNING - Asset not found: 70ee52cb-1753-4987-8b74-3c0567718a2d
2025-05-18 20:04:22 - app.services.document_service - ERROR - Error creating document: Asset not found
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\document_service.py", line 104, in create_document
    raise ValueError("Asset not found")
ValueError: Asset not found
2025-05-18 20:04:22 - app.routers.documents - WARNING - Validation error in create_new_document: Asset not found
2025-05-18 20:04:22 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-18 20:12:15 - app.main - INFO - Request: POST /api/asset-categories
2025-05-18 20:12:15 - app.main - INFO - Request: POST /api/asset-categories/
2025-05-18 20:12:15 - app.routers.asset_categories - INFO - Creating asset category: Monitors
2025-05-18 20:12:15 - app.services.asset_category_service - INFO - Creating category: Monitors
2025-05-18 20:12:15 - app.services.asset_category_service - INFO - Created category with ID: 1052ff57-e6ce-4238-b623-914a51cf1d38
2025-05-18 20:12:46 - app.main - INFO - Request: POST /api/employees
2025-05-18 20:12:46 - app.main - INFO - Request: POST /api/employees/
2025-05-18 20:12:46 - app.routers.employees - INFO - Creating employee: EMP002
2025-05-18 20:12:46 - app.services.employee_service - INFO - Creating employee: John Doe
2025-05-18 20:12:46 - app.services.employee_service - INFO - Created employee with ID: a35cdcd3-5a2d-4f7f-b2df-3f67cd5fdaa1
2025-05-18 20:13:02 - app.main - INFO - Request: POST /api/asset-items 
2025-05-18 20:13:02 - app.main - WARNING - Request failed: POST /api/asset-items  - Status: 404
2025-05-18 20:13:10 - app.main - INFO - Request: POST /api/asset-items 
2025-05-18 20:13:10 - app.main - WARNING - Request failed: POST /api/asset-items  - Status: 404
2025-05-18 20:18:38 - app.main - INFO - Request: POST /api/documents
2025-05-18 20:18:38 - app.main - INFO - Request: POST /api/documents/
2025-05-18 20:18:38 - app.routers.documents - INFO - POST /documents/
2025-05-18 20:18:38 - app.services.document_service - INFO - Creating document - asset_id: 70ee52cb-1753-4987-8b74-3c0567718a2d, employee_id: None, type: DocumentType.INVOICE
2025-05-18 20:18:39 - app.services.document_service - WARNING - Asset not found: 70ee52cb-1753-4987-8b74-3c0567718a2d
2025-05-18 20:18:39 - app.services.document_service - ERROR - Error creating document: Asset not found
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\document_service.py", line 104, in create_document
    raise ValueError("Asset not found")
ValueError: Asset not found
2025-05-18 20:18:39 - app.routers.documents - WARNING - Validation error in create_new_document: Asset not found
2025-05-18 20:18:39 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-18 20:18:44 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-18 20:18:55 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-18 20:18:55 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-18 20:18:55 - app.main - INFO - Registering routers with prefix /api
2025-05-18 20:18:55 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-18 20:18:55 - app.main - INFO - MongoDB connection verified successfully
2025-05-18 20:18:55 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-18 20:18:55 - app.main - INFO - All database indexes verified
2025-05-18 20:18:55 - app.main - INFO - Server started successfully!
2025-05-18 20:18:55 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-18 20:19:57 - app.main - INFO - Request: POST /api/documents
2025-05-18 20:19:57 - app.main - INFO - Request: POST /api/documents/
2025-05-18 20:19:57 - app.routers.documents - INFO - POST /documents/
2025-05-18 20:19:57 - app.services.document_service - INFO - Creating document - asset_id: 70ee52cb-1753-4987-8b74-3c0567718a2d, employee_id: None, type: DocumentType.INVOICE
2025-05-18 20:19:57 - app.services.document_service - WARNING - Asset not found: 70ee52cb-1753-4987-8b74-3c0567718a2d
2025-05-18 20:19:57 - app.services.document_service - ERROR - Error creating document: Asset not found
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\document_service.py", line 104, in create_document
    raise ValueError("Asset not found")
ValueError: Asset not found
2025-05-18 20:19:57 - app.routers.documents - WARNING - Validation error in create_new_document: Asset not found
2025-05-18 20:19:57 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-18 20:22:11 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-18 20:22:23 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-18 20:22:23 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-18 20:22:23 - app.main - INFO - Registering routers with prefix /api
2025-05-18 20:22:24 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-18 20:22:24 - app.main - INFO - MongoDB connection verified successfully
2025-05-18 20:22:24 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-18 20:22:24 - app.main - INFO - All database indexes verified
2025-05-18 20:22:24 - app.main - INFO - Server started successfully!
2025-05-18 20:22:24 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-18 20:24:26 - app.main - INFO - Request: POST /api/documents/import
2025-05-18 20:24:26 - app.routers.documents - INFO - POST /documents/import
2025-05-18 20:24:26 - app.services.document_service - INFO - Creating document - asset_id: 70ee52cb-1753-4987-8b74-3c0567718a2d, employee_id: None, type: DocumentType.INVOICE
2025-05-18 20:24:27 - app.services.document_service - INFO - Created document with ID: DOC-D60D66D4
2025-05-18 20:24:27 - app.routers.documents - INFO - Document imported successfully with ID: DOC-D60D66D4
2025-05-18 20:26:03 - app.main - INFO - Request: POST /api/documents/import
2025-05-18 20:26:03 - app.routers.documents - INFO - POST /documents/import
2025-05-18 20:26:03 - app.services.document_service - INFO - Creating document - asset_id: 70ee52cb-1753-4987-8b74-3c0567718a2d, employee_id: None, type: DocumentType.INVOICE
2025-05-18 20:26:03 - app.services.document_service - WARNING - Document with file_url https://storage.company.com/documents/invoices/dell_xps13_invoice.pdf already exists
2025-05-18 20:26:03 - app.services.document_service - ERROR - Error creating document: Document with file_url https://storage.company.com/documents/invoices/dell_xps13_invoice.pdf already exists
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\document_service.py", line 124, in create_document
    raise ValueError(f"Document with file_url {document.file_url} already exists")
ValueError: Document with file_url https://storage.company.com/documents/invoices/dell_xps13_invoice.pdf already exists
2025-05-18 20:26:03 - app.routers.documents - WARNING - Validation error in import_document: Document with file_url https://storage.company.com/documents/invoices/dell_xps13_invoice.pdf already exists
2025-05-18 20:26:03 - app.main - WARNING - Request failed: POST /api/documents/import - Status: 400
2025-05-18 20:26:15 - app.main - INFO - Request: POST /api/documents/import
2025-05-18 20:26:15 - app.routers.documents - INFO - POST /documents/import
2025-05-18 20:26:15 - app.services.document_service - INFO - Creating document - asset_id: 70ee52cb-1753-4987-8b74-3c0567718a2d, employee_id: None, type: DocumentType.WARRANTY
2025-05-18 20:26:15 - app.services.document_service - INFO - Created document with ID: DOC-090477D7
2025-05-18 20:26:15 - app.routers.documents - INFO - Document imported successfully with ID: DOC-090477D7
2025-05-18 20:26:22 - app.main - INFO - Request: POST /api/documents/import
2025-05-18 20:26:22 - app.routers.documents - INFO - POST /documents/import
2025-05-18 20:26:22 - app.services.document_service - INFO - Creating document - asset_id: 70ee52cb-1753-4987-8b74-3c0567718a2d, employee_id: 3a142936-dcb9-4962-9c9b-94995d6eb1f3, type: DocumentType.CONTRACT
2025-05-18 20:26:22 - app.services.document_service - INFO - Created document with ID: DOC-A0F23CD8
2025-05-18 20:26:22 - app.routers.documents - INFO - Document imported successfully with ID: DOC-A0F23CD8
2025-05-18 20:26:29 - app.main - INFO - Request: POST /api/documents/import
2025-05-18 20:26:29 - app.main - WARNING - Request failed: POST /api/documents/import - Status: 422
2025-05-18 20:26:46 - app.main - INFO - Request: POST /api/requests
2025-05-18 20:26:46 - app.main - INFO - Request: POST /api/requests/
2025-05-18 20:26:46 - app.main - ERROR - Request failed: POST /api/requests/ - Error: 'RequestCreate' object has no attribute 'request_type'
2025-05-18 20:26:57 - app.main - INFO - Request: POST /api/requests
2025-05-18 20:26:57 - app.main - INFO - Request: POST /api/requests/
2025-05-18 20:26:57 - app.main - ERROR - Request failed: POST /api/requests/ - Error: 'RequestCreate' object has no attribute 'request_type'
2025-05-18 20:44:18 - app.main - INFO - Request: POST /api/documents/import
2025-05-18 20:44:18 - app.routers.documents - INFO - POST /documents/import
2025-05-18 20:44:18 - app.services.document_service - INFO - Creating document - asset_id: 70ee52cb-1753-4987-8b74-3c0567718a2d, employee_id: None, type: DocumentType.INVOICE
2025-05-18 20:44:18 - app.services.document_service - INFO - Created document with ID: DOC-07CC8339
2025-05-18 20:44:18 - app.routers.documents - INFO - Document imported successfully with ID: DOC-07CC8339
2025-05-18 20:47:32 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-18 20:47:42 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-18 20:47:42 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-18 20:47:42 - app.main - INFO - Registering routers with prefix /api
2025-05-18 20:47:42 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-18 20:47:42 - app.main - INFO - MongoDB connection verified successfully
2025-05-18 20:47:42 - app.main - INFO - Creating collection: request_approval
2025-05-18 20:47:42 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-18 20:47:42 - app.main - INFO - All database indexes verified
2025-05-18 20:47:42 - app.main - INFO - Server started successfully!
2025-05-18 20:47:42 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-18 20:50:22 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-18 20:50:36 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-18 20:50:36 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-18 20:50:36 - app.main - INFO - Registering routers with prefix /api
2025-05-18 20:50:37 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-18 20:50:37 - app.main - INFO - MongoDB connection verified successfully
2025-05-18 20:50:37 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-18 20:50:37 - app.main - INFO - All database indexes verified
2025-05-18 20:50:37 - app.main - INFO - Server started successfully!
2025-05-18 20:50:37 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-18 20:50:42 - app.main - INFO - Request: POST /api/documents/import
2025-05-18 20:50:42 - app.routers.documents - INFO - POST /documents/import
2025-05-18 20:50:42 - app.services.document_service - INFO - Creating document - asset_id: 70ee52cb-1753-4987-8b74-3c0567718a2d, employee_id: None, type: DocumentType.INVOICE
2025-05-18 20:50:42 - app.services.document_service - INFO - Created document with ID: DOC-387CB58A
2025-05-18 20:50:42 - app.routers.documents - INFO - Document imported successfully with ID: DOC-387CB58A
2025-05-18 21:01:28 - app.main - INFO - Request: POST /api/documents/import
2025-05-18 21:01:28 - app.main - WARNING - Request failed: POST /api/documents/import - Status: 422
2025-05-18 21:01:37 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-18 21:04:19 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-18 21:04:19 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-18 21:04:19 - app.main - INFO - Registering routers with prefix /api
2025-05-18 21:04:19 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-18 21:04:19 - app.main - INFO - MongoDB connection verified successfully
2025-05-18 21:04:19 - app.main - INFO - Creating collection: request_approval
2025-05-18 21:04:19 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-18 21:04:19 - app.main - INFO - All database indexes verified
2025-05-18 21:04:19 - app.main - INFO - Server started successfully!
2025-05-18 21:04:19 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-18 21:04:26 - app.main - INFO - Request: POST /api/documents/import
2025-05-18 21:04:26 - app.main - WARNING - Request failed: POST /api/documents/import - Status: 422
2025-05-18 21:07:50 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-18 21:08:02 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-18 21:08:02 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-18 21:08:02 - app.main - INFO - Registering routers with prefix /api
2025-05-18 21:08:02 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-18 21:08:02 - app.main - INFO - MongoDB connection verified successfully
2025-05-18 21:08:02 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-18 21:08:02 - app.main - INFO - All database indexes verified
2025-05-18 21:08:02 - app.main - INFO - Server started successfully!
2025-05-18 21:08:02 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-18 21:08:18 - app.main - INFO - Request: POST /api/documents/import
2025-05-18 21:08:18 - app.routers.documents - INFO - POST /documents/import
2025-05-18 21:08:18 - app.services.document_service - INFO - Creating document - asset_id: AST-001, employee_id: None, type: DocumentType.INVOICE
2025-05-18 21:08:18 - app.services.document_service - ERROR - Error creating document: 'Collection' object is not callable. If you meant to call the 'get_collection' method on a 'Collection' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\document_service.py", line 138, in create_document
    collection = db.get_collection(DOCUMENTS_COLLECTION)
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 407, in __call__
    raise TypeError(
    ...<3 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'get_collection' method on a 'Collection' object it is failing because no such method exists.
2025-05-18 21:08:18 - app.routers.documents - WARNING - Validation error in import_document: 'Collection' object is not callable. If you meant to call the 'get_collection' method on a 'Collection' object it is failing because no such method exists.
2025-05-18 21:08:18 - app.main - WARNING - Request failed: POST /api/documents/import - Status: 400
2025-05-18 21:29:51 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-18 21:30:00 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-18 21:30:00 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-18 21:30:00 - app.main - INFO - Registering routers with prefix /api
2025-05-18 21:30:00 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-18 21:30:00 - app.main - INFO - MongoDB connection verified successfully
2025-05-18 21:30:00 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-18 21:30:01 - app.main - INFO - All database indexes verified
2025-05-18 21:30:01 - app.main - INFO - Server started successfully!
2025-05-18 21:30:01 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-18 21:30:04 - app.main - INFO - Request: POST /api/documents/import
2025-05-18 21:30:04 - app.routers.documents - INFO - POST /documents/import
2025-05-18 21:30:04 - app.services.document_service - INFO - Creating document - asset_id: AST-001, employee_id: None, type: DocumentType.INVOICE
2025-05-18 21:30:04 - app.services.document_service - INFO - Created document with ID: DOC-FE4A50C4
2025-05-18 21:30:04 - app.routers.documents - INFO - Document imported successfully with ID: DOC-FE4A50C4
2025-05-18 21:30:52 - app.main - INFO - Request: POST /api/documents/import
2025-05-18 21:30:52 - app.routers.documents - INFO - POST /documents/import
2025-05-18 21:30:52 - app.services.document_service - INFO - Creating document - asset_id: AST-001, employee_id: None, type: DocumentType.INVOICE
2025-05-18 21:30:52 - app.services.document_service - WARNING - Document with file_url https://storage.example.com/documents/invoice_123456.pdf already exists
2025-05-18 21:30:52 - app.services.document_service - ERROR - Error creating document: Document with file_url https://storage.example.com/documents/invoice_123456.pdf already exists
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\document_service.py", line 152, in create_document
    raise ValueError(f"Document with file_url {document.file_url} already exists")
ValueError: Document with file_url https://storage.example.com/documents/invoice_123456.pdf already exists
2025-05-18 21:30:52 - app.routers.documents - WARNING - Validation error in import_document: Document with file_url https://storage.example.com/documents/invoice_123456.pdf already exists
2025-05-18 21:30:52 - app.main - WARNING - Request failed: POST /api/documents/import - Status: 400
2025-05-18 22:07:04 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-18 22:31:06 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-18 22:31:06 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-18 22:31:06 - app.main - INFO - Registering routers with prefix /api
2025-05-18 22:31:06 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-18 22:31:06 - app.main - INFO - MongoDB connection verified successfully
2025-05-18 22:31:06 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-18 22:31:06 - app.main - INFO - All database indexes verified
2025-05-18 22:31:06 - app.main - INFO - Server started successfully!
2025-05-18 22:31:06 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-18 22:33:14 - app.main - INFO - Request: POST /api/requests/
2025-05-18 22:33:14 - app.routers.request - INFO - POST /requests/ - type: RequestType.ASSET_REQUEST
2025-05-18 22:33:14 - app.routers.request - ERROR - Error in create_new_request: 'Collection' object is not callable. If you meant to call the 'get_collection' method on a 'Collection' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\request.py", line 139, in create_new_request
    result = request_service.create_request(collection, request)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\request_service.py", line 127, in create_request
    collection = db.get_collection(REQUESTS_COLLECTION)
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 407, in __call__
    raise TypeError(
    ...<3 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'get_collection' method on a 'Collection' object it is failing because no such method exists.
2025-05-18 22:33:14 - app.main - WARNING - Request failed: POST /api/requests/ - Status: 500
2025-05-18 22:37:16 - app.main - INFO - Request: POST /api/requests/
2025-05-18 22:37:16 - app.routers.request - INFO - POST /requests/ - type: RequestType.ASSET_REQUEST
2025-05-18 22:37:16 - app.routers.request - ERROR - Error in create_new_request: 'Collection' object is not callable. If you meant to call the 'get_collection' method on a 'Collection' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\request.py", line 139, in create_new_request
    result = request_service.create_request(collection, request)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\request_service.py", line 127, in create_request
    db (Union[Database, Collection]): MongoDB database instance or collection
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 407, in __call__
    raise TypeError(
    ...<3 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'get_collection' method on a 'Collection' object it is failing because no such method exists.
2025-05-18 22:37:16 - app.main - WARNING - Request failed: POST /api/requests/ - Status: 500
2025-05-19 01:28:46 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-19 01:28:56 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-19 01:28:56 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-19 01:28:56 - app.main - INFO - Registering routers with prefix /api
2025-05-19 01:28:56 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-19 01:28:56 - app.main - INFO - MongoDB connection verified successfully
2025-05-19 01:28:56 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-19 01:28:56 - app.main - INFO - All database indexes verified
2025-05-19 01:28:56 - app.main - INFO - Server started successfully!
2025-05-19 01:28:56 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-19 01:29:08 - app.main - INFO - Request: POST /api/requests/
2025-05-19 01:29:08 - app.routers.request - INFO - POST /requests/ - type: RequestType.ASSET_REQUEST
2025-05-19 01:34:09 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-19 01:34:19 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-19 01:34:19 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-19 01:34:19 - app.main - INFO - Registering routers with prefix /api
2025-05-19 01:34:20 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-19 01:34:20 - app.main - INFO - MongoDB connection verified successfully
2025-05-19 01:34:20 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-19 01:34:20 - app.main - INFO - All database indexes verified
2025-05-19 01:34:20 - app.main - INFO - Server started successfully!
2025-05-19 01:34:20 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-19 05:24:54 - app.main - INFO - Request: POST /api/v1/categories
2025-05-19 05:24:54 - app.main - WARNING - Request failed: POST /api/v1/categories - Status: 404
2025-05-19 05:25:03 - app.main - INFO - Request: POST /api/categories
2025-05-19 05:25:03 - app.main - WARNING - Request failed: POST /api/categories - Status: 404
2025-05-19 05:40:05 - app.main - INFO - Request: POST /api/asset-categories
2025-05-19 05:40:05 - app.main - INFO - Request: POST /api/asset-categories/
2025-05-19 05:40:05 - app.routers.asset_categories - INFO - Creating asset category: Software Licenses
2025-05-19 05:40:05 - app.services.asset_category_service - INFO - Creating category: Software Licenses
2025-05-19 05:40:05 - app.services.asset_category_service - INFO - Created category with ID: 8211a835-bed3-4aab-89b6-a020b07d41cc
2025-05-19 05:42:33 - app.main - INFO - Request: POST /api/asset-categories
2025-05-19 05:42:33 - app.main - INFO - Request: POST /api/asset-categories/
2025-05-19 05:42:33 - app.routers.asset_categories - INFO - Creating asset category: Mobile Phones
2025-05-19 05:42:33 - app.services.asset_category_service - INFO - Creating category: Mobile Phones
2025-05-19 05:42:33 - app.services.asset_category_service - INFO - Created category with ID: 4ffde1a3-b8f6-41c3-8894-ee1385360845
2025-05-19 05:42:59 - app.main - INFO - Request: POST /api/asset-items
2025-05-19 05:42:59 - app.main - INFO - Request: POST /api/asset-items/
2025-05-19 05:42:59 - app.main - WARNING - Request failed: POST /api/asset-items/ - Status: 422
2025-05-19 05:44:07 - app.main - INFO - Request: POST /api/asset-items
2025-05-19 05:44:07 - app.main - INFO - Request: POST /api/asset-items/
2025-05-19 05:44:07 - app.main - WARNING - Request failed: POST /api/asset-items/ - Status: 422
2025-05-19 05:44:39 - app.main - INFO - Request: POST /api/employees
2025-05-19 05:44:39 - app.main - INFO - Request: POST /api/employees/
2025-05-19 05:44:39 - app.routers.employees - INFO - Creating employee: EMP003
2025-05-19 05:44:39 - app.services.employee_service - INFO - Creating employee: Sarah Johnson
2025-05-19 05:44:39 - app.services.employee_service - INFO - Created employee with ID: 50428004-84a3-44e5-ae0c-a7e5cccdedfa
2025-05-19 05:45:51 - app.main - INFO - Request: POST /api/employees
2025-05-19 05:45:51 - app.main - INFO - Request: POST /api/employees/
2025-05-19 05:45:51 - app.routers.employees - INFO - Creating employee: EMP004
2025-05-19 05:45:51 - app.services.employee_service - INFO - Creating employee: Michael Brown
2025-05-19 05:45:51 - app.services.employee_service - INFO - Created employee with ID: fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-19 05:46:21 - app.main - INFO - Request: POST /api/documents
2025-05-19 05:46:21 - app.main - INFO - Request: POST /api/documents/
2025-05-19 05:46:21 - app.routers.documents - INFO - POST /documents/
2025-05-19 05:46:21 - app.services.document_service - INFO - Creating document - asset_id: 70ee52cb-1753-4987-8b74-3c0567718a2d, employee_id: None, type: DocumentType.WARRANTY
2025-05-19 05:46:21 - app.services.document_service - WARNING - Uploader not found: EMP001
2025-05-19 05:46:21 - app.services.document_service - ERROR - Error creating document: Uploader not found
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\document_service.py", line 141, in create_document
    raise ValueError("Uploader not found")
ValueError: Uploader not found
2025-05-19 05:46:21 - app.routers.documents - WARNING - Validation error in create_new_document: Uploader not found
2025-05-19 05:46:21 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 13:10:58 - app.main - INFO - Request: POST /api/documents
2025-05-19 13:10:58 - app.main - INFO - Request: POST /api/documents/
2025-05-19 13:10:58 - app.routers.documents - INFO - POST /documents/
2025-05-19 13:10:58 - app.services.document_service - INFO - Creating document - asset_id: 70ee52cb-1753-4987-8b74-3c0567718a2d, employee_id: None, type: DocumentType.WARRANTY
2025-05-19 13:10:58 - app.services.document_service - WARNING - Duplicate file_url: https://storage.example.com/documents/warranty_dell_xps13.pdf
2025-05-19 13:10:58 - app.routers.documents - WARNING - Validation error in create_new_document: Document with file_url https://storage.example.com/documents/warranty_dell_xps13.pdf already exists
2025-05-19 13:10:58 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 13:11:18 - app.main - INFO - Request: POST /api/maintenance-history/
2025-05-19 13:11:18 - app.main - INFO - Request: POST /api/maintenance-history
2025-05-19 13:11:18 - app.routers.maintenance_history - INFO - Creating maintenance history entry for asset 70ee52cb-1753-4987-8b74-3c0567718a2d
2025-05-19 13:11:41 - app.main - INFO - Request: POST /api/assignment-history/
2025-05-19 13:11:41 - app.main - WARNING - Request failed: POST /api/assignment-history/ - Status: 404
2025-05-19 13:12:01 - app.main - INFO - Request: POST /api/requests/
2025-05-19 13:12:01 - app.main - WARNING - Request failed: POST /api/requests/ - Status: 422
2025-05-19 16:17:14 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-19 16:17:14 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-19 16:17:14 - app.main - INFO - Registering routers with prefix /api
2025-05-19 16:17:14 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-19 16:17:14 - app.main - INFO - MongoDB connection verified successfully
2025-05-19 16:17:14 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-19 16:17:15 - app.main - INFO - All database indexes verified
2025-05-19 16:17:15 - app.main - INFO - Server started successfully!
2025-05-19 16:17:15 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-19 16:18:18 - app.main - INFO - Request: POST /api/asset-items/
2025-05-19 16:18:18 - app.main - WARNING - Request failed: POST /api/asset-items/ - Status: 422
2025-05-19 16:18:45 - app.main - INFO - Request: POST /api/documents/
2025-05-19 16:18:45 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 422
2025-05-19 16:18:49 - app.main - INFO - Request: POST /api/documents/
2025-05-19 16:18:49 - app.routers.documents - INFO - POST /documents/
2025-05-19 16:18:49 - app.services.document_service - INFO - Creating document - asset_id: None, employee_id: None, type: DocumentType.WARRANTY
2025-05-19 16:18:49 - app.services.document_service - WARNING - At least one of asset_id or employee_id required
2025-05-19 16:18:49 - app.services.document_service - ERROR - Error creating document: At least one of asset_id or employee_id must be provided
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\document_service.py", line 108, in create_document
    raise ValueError("At least one of asset_id or employee_id must be provided")
ValueError: At least one of asset_id or employee_id must be provided
2025-05-19 16:18:49 - app.routers.documents - WARNING - Validation error in create_new_document: At least one of asset_id or employee_id must be provided
2025-05-19 16:18:49 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 16:19:22 - app.main - INFO - Request: POST /api/assignment-history/
2025-05-19 16:19:22 - app.main - WARNING - Request failed: POST /api/assignment-history/ - Status: 404
2025-05-19 16:19:38 - app.main - INFO - Request: POST /api/requests/
2025-05-19 16:19:38 - app.routers.request - INFO - POST /requests/ - type: RequestType.ASSET_REQUEST
2025-05-19 16:20:01 - app.main - INFO - Request: POST /api/asset-items/
2025-05-19 16:20:01 - app.main - WARNING - Request failed: POST /api/asset-items/ - Status: 422
2025-05-19 16:20:22 - app.main - INFO - Request: POST /api/asset-items/
2025-05-19 16:20:22 - app.main - WARNING - Request failed: POST /api/asset-items/ - Status: 422
2025-05-19 16:26:08 - app.main - INFO - Request: GET /docs
2025-05-19 16:26:09 - app.main - INFO - Request: GET /openapi.json
2025-05-19 16:31:46 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-19 16:31:56 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-19 16:31:56 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-19 16:31:56 - app.main - INFO - Registering routers with prefix /api
2025-05-19 16:31:56 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-19 16:31:56 - app.main - INFO - MongoDB connection verified successfully
2025-05-19 16:31:56 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-19 16:31:56 - app.main - INFO - All database indexes verified
2025-05-19 16:31:56 - app.main - INFO - Server started successfully!
2025-05-19 16:31:56 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-19 16:32:03 - app.main - INFO - Request: POST /api/asset-categories/
2025-05-19 16:32:04 - app.routers.asset_categories - INFO - Creating asset category: Network Equipment
2025-05-19 16:32:04 - app.services.asset_category_service - INFO - Creating category: Network Equipment
2025-05-19 16:32:04 - app.services.asset_category_service - INFO - Created category with ID: 5c2d5cc3-5d45-4a1d-8c52-56c5bfd7182b
2025-05-19 16:32:21 - app.main - INFO - Request: POST /api/asset-items/
2025-05-19 16:32:21 - app.routers.asset_items - INFO - Creating asset item: Cisco Catalyst 2960-X
2025-05-19 16:32:21 - app.services.asset_item_service - INFO - Creating asset: Cisco Catalyst 2960-X
2025-05-19 16:32:21 - app.services.asset_item_service - WARNING - Category not found: [NETWORK_EQUIPMENT_CATEGORY_ID]
2025-05-19 16:32:21 - app.routers.asset_items - WARNING - Failed to create asset item: Category with ID '[NETWORK_EQUIPMENT_CATEGORY_ID]' does not exist
2025-05-19 16:32:21 - app.main - WARNING - Request failed: POST /api/asset-items/ - Status: 400
2025-05-19 16:32:58 - app.main - INFO - Request: POST /api/asset-items/
2025-05-19 16:32:58 - app.routers.asset_items - INFO - Creating asset item: Cisco Catalyst 2960-X
2025-05-19 16:32:58 - app.services.asset_item_service - INFO - Creating asset: Cisco Catalyst 2960-X
2025-05-19 16:32:59 - app.services.asset_item_service - INFO - Created asset with ID: 76ad2e00-5c0d-4e3c-9307-5114330e425c
2025-05-19 16:33:17 - app.main - INFO - Request: POST /api/employees/
2025-05-19 16:33:17 - app.routers.employees - INFO - Creating employee: EMP005
2025-05-19 16:33:17 - app.services.employee_service - INFO - Creating employee: David Garcia
2025-05-19 16:33:18 - app.services.employee_service - INFO - Created employee with ID: 1be3bc7d-a769-4a40-b2ea-0d2dc1b57390
2025-05-19 16:33:34 - app.main - INFO - Request: POST /api/documents/
2025-05-19 16:33:34 - app.routers.documents - INFO - POST /documents/
2025-05-19 16:33:34 - app.services.document_service - INFO - Creating document - asset_id: [CISCO_SWITCH_ASSET_ID], employee_id: None, type: DocumentType.WARRANTY
2025-05-19 16:33:34 - app.services.document_service - WARNING - Asset not found: [CISCO_SWITCH_ASSET_ID]
2025-05-19 16:33:34 - app.services.document_service - ERROR - Error creating document: Asset not found
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\document_service.py", line 129, in create_document
    raise ValueError("Asset not found")
ValueError: Asset not found
2025-05-19 16:33:34 - app.routers.documents - WARNING - Validation error in create_new_document: Asset not found
2025-05-19 16:33:34 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 16:34:30 - app.main - INFO - Request: POST /api/documents/
2025-05-19 16:34:30 - app.routers.documents - INFO - POST /documents/
2025-05-19 16:34:30 - app.services.document_service - INFO - Creating document - asset_id: 76ad2e00-5c0d-4e3c-9307-5114330e425c, employee_id: None, type: DocumentType.WARRANTY
2025-05-19 16:34:30 - app.services.document_service - WARNING - Duplicate file_url: https://storage.example.com/documents/cisco_warranty_2960x.pdf
2025-05-19 16:34:30 - app.routers.documents - WARNING - Validation error in create_new_document: Document with file_url https://storage.example.com/documents/cisco_warranty_2960x.pdf already exists
2025-05-19 16:34:30 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 16:39:09 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 16:39:09 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 422
2025-05-19 16:40:46 - app.main - INFO - Request: POST /api/maintenance-history
2025-05-19 16:40:46 - app.routers.maintenance_history - INFO - Creating maintenance history entry for asset 76ad2e00-5c0d-4e3c-9307-5114330e425c
2025-05-19 16:40:46 - app.routers.maintenance_history - ERROR - Failed to create maintenance history: E11000 duplicate key error collection: asset_management.maintenance_history index: id_1 dup key: { id: null }, full error: {'index': 0, 'code': 11000, 'errmsg': 'E11000 duplicate key error collection: asset_management.maintenance_history index: id_1 dup key: { id: null }', 'keyPattern': {'id': 1}, 'keyValue': {'id': None}}
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\maintenance_history.py", line 38, in create_maintenance_history
    result = db.maintenance_history.insert_one(maintenance.model_dump(exclude_unset=True))
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 870, in insert_one
    self._insert_one(
    ~~~~~~~~~~~~~~~~^
        document,
        ^^^^^^^^^
    ...<5 lines>...
        comment=comment,
        ^^^^^^^^^^^^^^^^
    ),
    ^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 810, in _insert_one
    self._database.client._retryable_write(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        acknowledged, _insert_command, session, operation=_Op.INSERT
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1898, in _retryable_write
    return self._retry_with_session(retryable, func, s, bulk, operation, operation_id)
           ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1784, in _retry_with_session
    return self._retry_internal(
           ~~~~~~~~~~~~~~~~~~~~^
        func=func,
        ^^^^^^^^^^
    ...<4 lines>...
        operation_id=operation_id,
        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\_csot.py", line 120, in csot_wrapper
    return func(self, *args, **kwargs)
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1830, in _retry_internal
    ).run()
      ~~~^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 2554, in run
    return self._read() if self._is_read else self._write()
                                              ~~~~~~~~~~~^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 2676, in _write
    return self._func(self._session, conn, self._retryable)  # type: ignore
           ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 808, in _insert_command
    _check_write_command_response(result)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\helpers_shared.py", line 285, in _check_write_command_response
    _raise_last_write_error(write_errors)
    ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\helpers_shared.py", line 255, in _raise_last_write_error
    raise DuplicateKeyError(error.get("errmsg"), 11000, error)
pymongo.errors.DuplicateKeyError: E11000 duplicate key error collection: asset_management.maintenance_history index: id_1 dup key: { id: null }, full error: {'index': 0, 'code': 11000, 'errmsg': 'E11000 duplicate key error collection: asset_management.maintenance_history index: id_1 dup key: { id: null }', 'keyPattern': {'id': 1}, 'keyValue': {'id': None}}
2025-05-19 16:40:47 - app.main - WARNING - Request failed: POST /api/maintenance-history - Status: 500
2025-05-19 16:42:09 - app.main - INFO - Request: POST /api/requests/
2025-05-19 16:42:09 - app.routers.request - INFO - POST /requests/ - type: RequestType.ASSET_REQUEST
2025-05-19 16:42:37 - app.main - INFO - Request: POST /api/asset-categories/
2025-05-19 16:42:37 - app.routers.asset_categories - INFO - Creating asset category: Office Furniture
2025-05-19 16:42:37 - app.services.asset_category_service - INFO - Creating category: Office Furniture
2025-05-19 16:42:37 - app.services.asset_category_service - INFO - Created category with ID: b26222e4-7867-4c78-a3e3-17abd46d6897
2025-05-19 16:43:17 - app.main - INFO - Request: POST /api/asset-items/
2025-05-19 16:43:17 - app.routers.asset_items - INFO - Creating asset item: Herman Miller Aeron Chair
2025-05-19 16:43:17 - app.services.asset_item_service - INFO - Creating asset: Herman Miller Aeron Chair
2025-05-19 16:43:18 - app.services.asset_item_service - INFO - Created asset with ID: 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac
2025-05-19 16:44:24 - app.main - INFO - Request: POST /api/documents/
2025-05-19 16:44:24 - app.routers.documents - INFO - POST /documents/
2025-05-19 16:44:24 - app.services.document_service - INFO - Creating document - asset_id: 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac, employee_id: None, type: DocumentType.WARRANTY
2025-05-19 16:44:24 - app.services.document_service - WARNING - Duplicate file_url: https://storage.example.com/documents/herman_miller_warranty.pdf
2025-05-19 16:44:24 - app.routers.documents - WARNING - Validation error in create_new_document: Document with file_url https://storage.example.com/documents/herman_miller_warranty.pdf already exists
2025-05-19 16:44:24 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 16:45:25 - app.main - INFO - Request: POST /api/requests/
2025-05-19 16:45:25 - app.routers.request - INFO - POST /requests/ - type: RequestType.ASSET_REQUEST
2025-05-19 16:46:23 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 16:46:23 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 422
2025-05-19 16:53:26 - app.main - INFO - Request: POST /api/documents/
2025-05-19 16:53:26 - app.routers.documents - INFO - POST /documents/
2025-05-19 16:53:26 - app.services.document_service - INFO - Creating document - asset_id: 76ad2e00-5c0d-4e3c-9307-5114330e425c, employee_id: None, type: DocumentType.WARRANTY
2025-05-19 16:53:26 - app.services.document_service - WARNING - Duplicate file_url: https://storage.example.com/documents/cisco_warranty_2960x_v2.pdf
2025-05-19 16:53:26 - app.routers.documents - WARNING - Validation error in create_new_document: Document with file_url https://storage.example.com/documents/cisco_warranty_2960x_v2.pdf already exists
2025-05-19 16:53:26 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 16:53:49 - app.main - INFO - Request: POST /api/documents/
2025-05-19 16:53:49 - app.routers.documents - INFO - POST /documents/
2025-05-19 16:53:49 - app.services.document_service - INFO - Creating document - asset_id: 76ad2e00-5c0d-4e3c-9307-5114330e425c, employee_id: None, type: DocumentType.WARRANTY
2025-05-19 16:53:50 - app.services.document_service - WARNING - Duplicate file_url: https://storage.example.com/documents/cisco_warranty_2960x_v2.pdf
2025-05-19 16:53:50 - app.routers.documents - WARNING - Validation error in create_new_document: Document with file_url https://storage.example.com/documents/cisco_warranty_2960x_v2.pdf already exists
2025-05-19 16:53:50 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 16:54:01 - app.main - INFO - Request: POST /api/documents/
2025-05-19 16:54:01 - app.routers.documents - INFO - POST /documents/
2025-05-19 16:54:01 - app.services.document_service - INFO - Creating document - asset_id: 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac, employee_id: None, type: DocumentType.WARRANTY
2025-05-19 16:54:01 - app.services.document_service - WARNING - Duplicate file_url: https://storage.example.com/documents/herman_miller_warranty_v2.pdf
2025-05-19 16:54:01 - app.routers.documents - WARNING - Validation error in create_new_document: Document with file_url https://storage.example.com/documents/herman_miller_warranty_v2.pdf already exists
2025-05-19 16:54:01 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 16:54:12 - app.main - INFO - Request: POST /api/documents/
2025-05-19 16:54:12 - app.routers.documents - INFO - POST /documents/
2025-05-19 16:54:12 - app.services.document_service - INFO - Creating document - asset_id: 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac, employee_id: None, type: DocumentType.WARRANTY
2025-05-19 16:54:12 - app.services.document_service - WARNING - Duplicate file_url: https://storage.example.com/documents/heerman_miller_warranty_v2.pdf
2025-05-19 16:54:12 - app.routers.documents - WARNING - Validation error in create_new_document: Document with file_url https://storage.example.com/documents/heerman_miller_warranty_v2.pdf already exists
2025-05-19 16:54:12 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 16:54:44 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 16:54:44 - app.routers.assignment_history - INFO - Assigning asset 76ad2e00-5c0d-4e3c-9307-5114330e425c to 1be3bc7d-a769-4a40-b2ea-0d2dc1b57390
2025-05-19 16:54:44 - app.services.assignment_history_service - INFO - Assigning asset 76ad2e00-5c0d-4e3c-9307-5114330e425c to employee None
2025-05-19 16:54:44 - app.services.assignment_history_service - WARNING - Employee not found: None
2025-05-19 16:54:44 - app.routers.assignment_history - WARNING - Failed to assign asset: Employee with ID None not found
2025-05-19 16:54:44 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 400
2025-05-19 16:55:17 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 16:55:17 - app.routers.assignment_history - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-19 16:55:17 - app.services.assignment_history_service - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to employee None
2025-05-19 16:55:17 - app.services.assignment_history_service - WARNING - Employee not found: None
2025-05-19 16:55:17 - app.routers.assignment_history - WARNING - Failed to assign asset: Employee with ID None not found
2025-05-19 16:55:17 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 400
2025-05-19 16:56:02 - app.main - INFO - Request: POST /api/maintenance-history
2025-05-19 16:56:02 - app.routers.maintenance_history - INFO - Creating maintenance history entry for asset 76ad2e00-5c0d-4e3c-9307-5114330e425c
2025-05-19 16:56:22 - app.main - INFO - Request: POST /api/maintenance-history
2025-05-19 16:56:22 - app.routers.maintenance_history - INFO - Creating maintenance history entry for asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac
2025-05-19 17:03:50 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:03:50 - app.routers.documents - INFO - POST /documents/
2025-05-19 17:03:50 - app.services.document_service - INFO - Creating document - asset_id: 76ad2e00-5c0d-4e3c-9307-5114330e425c, employee_id: None, type: DocumentType.MANUAL
2025-05-19 17:03:50 - app.services.document_service - WARNING - Duplicate file_url: https://storage.example.com/docs/cisco_2960x_manual_1234.pdf
2025-05-19 17:03:50 - app.routers.documents - WARNING - Validation error in create_new_document: Document with file_url https://storage.example.com/docs/cisco_2960x_manual_1234.pdf already exists
2025-05-19 17:03:50 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 17:04:00 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:04:00 - app.routers.documents - INFO - POST /documents/
2025-05-19 17:04:00 - app.services.document_service - INFO - Creating document - asset_id: 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac, employee_id: None, type: DocumentType.MANUAL
2025-05-19 17:04:00 - app.services.document_service - WARNING - Duplicate file_url: https://storage.example.com/docs/aeron_assembly_guide_5678.pdf
2025-05-19 17:04:00 - app.routers.documents - WARNING - Validation error in create_new_document: Document with file_url https://storage.example.com/docs/aeron_assembly_guide_5678.pdf already exists
2025-05-19 17:04:00 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 17:04:28 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:04:28 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 422
2025-05-19 17:04:45 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:04:45 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 422
2025-05-19 17:05:28 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 17:05:28 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 422
2025-05-19 17:05:46 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 17:05:46 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 422
2025-05-19 17:07:02 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:07:02 - app.routers.documents - INFO - POST /documents/
2025-05-19 17:07:02 - app.services.document_service - INFO - Creating document - asset_id: 76ad2e00-5c0d-4e3c-9307-5114330e425c, employee_id: None, type: DocumentType.MANUAL
2025-05-19 17:07:02 - app.services.document_service - WARNING - Duplicate file_url: https://storage.example.com/docs/cisco_2960x_technical_manual_unique1.pdf
2025-05-19 17:07:02 - app.routers.documents - WARNING - Validation error in create_new_document: Document with file_url https://storage.example.com/docs/cisco_2960x_technical_manual_unique1.pdf already exists
2025-05-19 17:07:02 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 17:07:13 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-19 17:07:22 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-19 17:07:22 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-19 17:07:22 - app.main - INFO - Registering routers with prefix /api
2025-05-19 17:07:22 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-19 17:07:22 - app.main - INFO - MongoDB connection verified successfully
2025-05-19 17:07:22 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-19 17:07:22 - app.main - INFO - All database indexes verified
2025-05-19 17:07:22 - app.main - INFO - Server started successfully!
2025-05-19 17:07:22 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-19 17:07:25 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:07:25 - app.routers.documents - INFO - POST /documents/
2025-05-19 17:07:25 - app.services.document_service - INFO - Creating document - asset_id: 76ad2e00-5c0d-4e3c-9307-5114330e425c, employee_id: None, type: DocumentType.MANUAL
2025-05-19 17:07:25 - app.services.document_service - WARNING - Duplicate file_url: https://storage.example.com/docs/cisco_2960x_technical_manual_unique1.pdf
2025-05-19 17:07:25 - app.routers.documents - WARNING - Validation error in create_new_document: Document with file_url https://storage.example.com/docs/cisco_2960x_technical_manual_unique1.pdf already exists
2025-05-19 17:07:25 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 17:07:32 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:07:32 - app.routers.documents - INFO - POST /documents/
2025-05-19 17:07:32 - app.services.document_service - INFO - Creating document - asset_id: 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac, employee_id: None, type: DocumentType.MANUAL
2025-05-19 17:07:32 - app.services.document_service - WARNING - Duplicate file_url: https://storage.example.com/docs/aeron_chair_manual_unique2.pdf
2025-05-19 17:07:32 - app.routers.documents - WARNING - Validation error in create_new_document: Document with file_url https://storage.example.com/docs/aeron_chair_manual_unique2.pdf already exists
2025-05-19 17:07:32 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 17:07:54 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 17:07:54 - app.routers.assignment_history - INFO - Assigning asset 76ad2e00-5c0d-4e3c-9307-5114330e425c to 1be3bc7d-a769-4a40-b2ea-0d2dc1b57390
2025-05-19 17:07:54 - app.services.assignment_history_service - INFO - Assigning asset 76ad2e00-5c0d-4e3c-9307-5114330e425c to employee 1be3bc7d-a769-4a40-b2ea-0d2dc1b57390
2025-05-19 17:07:54 - app.services.assignment_history_service - WARNING - Employee department IT not allowed to be assigned assets from category 5c2d5cc3-5d45-4a1d-8c52-56c5bfd7182b
2025-05-19 17:07:55 - app.routers.assignment_history - WARNING - Failed to assign asset: Employee in department 'IT' cannot be assigned assets from category 'Network Equipment'
2025-05-19 17:07:55 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 400
2025-05-19 17:08:19 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 17:08:19 - app.routers.assignment_history - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-19 17:08:19 - app.services.assignment_history_service - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to employee fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-19 17:08:19 - app.services.assignment_history_service - ERROR - Error assigning asset: 'AssignmentCreate' object has no attribute 'duration'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\assignment_history_service.py", line 190, in assign_asset_to_employee
    if assignment.duration and assignment.duration > 0:
       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssignmentCreate' object has no attribute 'duration'. Did you mean: 'location'?
2025-05-19 17:08:19 - app.routers.assignment_history - ERROR - Failed to assign asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac: 'AssignmentCreate' object has no attribute 'duration'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\assignment_history.py", line 66, in assign_asset
    updated_asset = assign_asset_to_employee(collection, assignment)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\assignment_history_service.py", line 190, in assign_asset_to_employee
    if assignment.duration and assignment.duration > 0:
       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssignmentCreate' object has no attribute 'duration'. Did you mean: 'location'?
2025-05-19 17:08:19 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 500
2025-05-19 17:09:46 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 17:09:46 - app.routers.assignment_history - INFO - Assigning asset 76ad2e00-5c0d-4e3c-9307-5114330e425c to 1be3bc7d-a769-4a40-b2ea-0d2dc1b57390
2025-05-19 17:09:46 - app.services.assignment_history_service - INFO - Assigning asset 76ad2e00-5c0d-4e3c-9307-5114330e425c to employee 1be3bc7d-a769-4a40-b2ea-0d2dc1b57390
2025-05-19 17:09:46 - app.services.assignment_history_service - WARNING - Employee department IT not allowed to be assigned assets from category 5c2d5cc3-5d45-4a1d-8c52-56c5bfd7182b
2025-05-19 17:09:46 - app.routers.assignment_history - WARNING - Failed to assign asset: Employee in department 'IT' cannot be assigned assets from category 'Network Equipment'
2025-05-19 17:09:46 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 400
2025-05-19 17:10:01 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-19 17:10:10 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-19 17:10:10 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-19 17:10:10 - app.main - INFO - Registering routers with prefix /api
2025-05-19 17:10:10 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-19 17:10:10 - app.main - INFO - MongoDB connection verified successfully
2025-05-19 17:10:10 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-19 17:10:11 - app.main - INFO - All database indexes verified
2025-05-19 17:10:11 - app.main - INFO - Server started successfully!
2025-05-19 17:10:11 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-19 17:10:15 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 17:10:15 - app.routers.assignment_history - INFO - Assigning asset 76ad2e00-5c0d-4e3c-9307-5114330e425c to 1be3bc7d-a769-4a40-b2ea-0d2dc1b57390
2025-05-19 17:10:15 - app.services.assignment_history_service - INFO - Assigning asset 76ad2e00-5c0d-4e3c-9307-5114330e425c to employee 1be3bc7d-a769-4a40-b2ea-0d2dc1b57390
2025-05-19 17:10:15 - app.services.assignment_history_service - WARNING - Employee department IT not allowed to be assigned assets from category 5c2d5cc3-5d45-4a1d-8c52-56c5bfd7182b
2025-05-19 17:10:15 - app.routers.assignment_history - WARNING - Failed to assign asset: Employee in department 'IT' cannot be assigned assets from category 'Network Equipment'
2025-05-19 17:10:15 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 400
2025-05-19 17:10:23 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 17:10:23 - app.routers.assignment_history - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-19 17:10:23 - app.services.assignment_history_service - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to employee fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-19 17:10:23 - app.services.assignment_history_service - ERROR - Error assigning asset: 'AssignmentCreate' object has no attribute 'duration'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\assignment_history_service.py", line 190, in assign_asset_to_employee
    if assignment.duration and assignment.duration > 0:
       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssignmentCreate' object has no attribute 'duration'. Did you mean: 'location'?
2025-05-19 17:10:23 - app.routers.assignment_history - ERROR - Failed to assign asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac: 'AssignmentCreate' object has no attribute 'duration'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\assignment_history.py", line 66, in assign_asset
    updated_asset = assign_asset_to_employee(collection, assignment)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\assignment_history_service.py", line 190, in assign_asset_to_employee
    if assignment.duration and assignment.duration > 0:
       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssignmentCreate' object has no attribute 'duration'. Did you mean: 'location'?
2025-05-19 17:10:23 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 500
2025-05-19 17:10:37 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:10:37 - app.routers.documents - INFO - POST /documents/
2025-05-19 17:10:37 - app.services.document_service - INFO - Creating document - asset_id: 76ad2e00-5c0d-4e3c-9307-5114330e425c, employee_id: None, type: DocumentType.MANUAL
2025-05-19 17:10:38 - app.services.document_service - WARNING - Duplicate file_url: https://storage.example.com/docs/cisco_manual_20250519170923.pdf
2025-05-19 17:10:38 - app.routers.documents - WARNING - Validation error in create_new_document: Document with file_url https://storage.example.com/docs/cisco_manual_20250519170923.pdf already exists
2025-05-19 17:10:38 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 17:10:58 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 17:10:58 - app.routers.assignment_history - INFO - Assigning asset 76ad2e00-5c0d-4e3c-9307-5114330e425c to 1be3bc7d-a769-4a40-b2ea-0d2dc1b57390
2025-05-19 17:10:58 - app.services.assignment_history_service - INFO - Assigning asset 76ad2e00-5c0d-4e3c-9307-5114330e425c to employee 1be3bc7d-a769-4a40-b2ea-0d2dc1b57390
2025-05-19 17:10:59 - app.services.assignment_history_service - WARNING - Employee department IT not allowed to be assigned assets from category 5c2d5cc3-5d45-4a1d-8c52-56c5bfd7182b
2025-05-19 17:10:59 - app.routers.assignment_history - WARNING - Failed to assign asset: Employee in department 'IT' cannot be assigned assets from category 'Network Equipment'
2025-05-19 17:10:59 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 400
2025-05-19 17:11:10 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:11:10 - app.routers.documents - INFO - POST /documents/
2025-05-19 17:11:10 - app.services.document_service - INFO - Creating document - asset_id: 76ad2e00-5c0d-4e3c-9307-5114330e425c, employee_id: None, type: DocumentType.MANUAL
2025-05-19 17:11:10 - app.services.document_service - WARNING - Duplicate file_url: mongodb://custom/document/cisco_manual_1590483726.pdf
2025-05-19 17:11:10 - app.routers.documents - WARNING - Validation error in create_new_document: Document with file_url mongodb://custom/document/cisco_manual_1590483726.pdf already exists
2025-05-19 17:11:10 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 17:11:17 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:11:17 - app.routers.documents - INFO - POST /documents/
2025-05-19 17:11:17 - app.services.document_service - INFO - Creating document - asset_id: 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac, employee_id: None, type: DocumentType.WARRANTY
2025-05-19 17:11:17 - app.services.document_service - WARNING - Duplicate file_url: mongodb://custom/document/aeron_warranty_8273649152.pdf
2025-05-19 17:11:17 - app.routers.documents - WARNING - Validation error in create_new_document: Document with file_url mongodb://custom/document/aeron_warranty_8273649152.pdf already exists
2025-05-19 17:11:17 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 17:15:47 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-19 17:15:56 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-19 17:15:56 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-19 17:15:56 - app.main - INFO - Registering routers with prefix /api
2025-05-19 17:15:57 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-19 17:15:57 - app.main - INFO - MongoDB connection verified successfully
2025-05-19 17:15:57 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-19 17:15:57 - app.main - INFO - All database indexes verified
2025-05-19 17:15:57 - app.main - INFO - Server started successfully!
2025-05-19 17:15:57 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-19 17:16:08 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:16:08 - app.routers.documents - INFO - POST /documents/
2025-05-19 17:16:08 - app.services.document_service - INFO - Creating document - asset_id: 76ad2e00-5c0d-4e3c-9307-5114330e425c, employee_id: None, type: DocumentType.MANUAL
2025-05-19 17:16:08 - app.services.document_service - WARNING - Duplicate key error for file_url: https://storage.example.com/docs/cisco_switch_manual_v1.pdf
2025-05-19 17:16:08 - app.routers.documents - WARNING - Validation error in create_new_document: Document with ID or name already exists
2025-05-19 17:16:08 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 17:16:31 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 17:16:31 - app.routers.assignment_history - INFO - Assigning asset 76ad2e00-5c0d-4e3c-9307-5114330e425c to 1be3bc7d-a769-4a40-b2ea-0d2dc1b57390
2025-05-19 17:16:31 - app.services.assignment_history_service - INFO - Assigning asset 76ad2e00-5c0d-4e3c-9307-5114330e425c to employee None
2025-05-19 17:16:31 - app.services.assignment_history_service - WARNING - Employee not found: None
2025-05-19 17:16:31 - app.routers.assignment_history - WARNING - Failed to assign asset: Employee with ID None not found
2025-05-19 17:16:31 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 400
2025-05-19 17:23:19 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:23:19 - app.routers.documents - INFO - POST /documents/
2025-05-19 17:23:19 - app.services.document_service - INFO - Creating document - asset_id: 76ad2e00-5c0d-4e3c-9307-5114330e425c, employee_id: None, type: DocumentType.MANUAL
2025-05-19 17:23:19 - app.services.document_service - WARNING - Duplicate key error for file_url: https://storage.example.com/docs/cisco_catalyst_guide_v23_1716211982.pdf
2025-05-19 17:23:19 - app.routers.documents - WARNING - Validation error in create_new_document: Document with ID or name already exists
2025-05-19 17:23:19 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 17:23:40 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:23:40 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 422
2025-05-19 17:23:50 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 17:23:50 - app.routers.assignment_history - INFO - Assigning asset 76ad2e00-5c0d-4e3c-9307-5114330e425c to 1be3bc7d-a769-4a40-b2ea-0d2dc1b57390
2025-05-19 17:23:50 - app.services.assignment_history_service - INFO - Assigning asset 76ad2e00-5c0d-4e3c-9307-5114330e425c to employee 1be3bc7d-a769-4a40-b2ea-0d2dc1b57390
2025-05-19 17:23:50 - app.services.assignment_history_service - ERROR - Error assigning asset: 'AssignmentCreate' object has no attribute 'checked_out_condition'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\assignment_history_service.py", line 254, in assign_asset_to_employee
    "checked_out_condition": assignment.checked_out_condition or "good",
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssignmentCreate' object has no attribute 'checked_out_condition'. Did you mean: 'checkout_condition'?
2025-05-19 17:23:50 - app.routers.assignment_history - ERROR - Failed to assign asset 76ad2e00-5c0d-4e3c-9307-5114330e425c: 'AssignmentCreate' object has no attribute 'checked_out_condition'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\assignment_history.py", line 66, in assign_asset
    updated_asset = assign_asset_to_employee(collection, assignment)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\assignment_history_service.py", line 254, in assign_asset_to_employee
    "checked_out_condition": assignment.checked_out_condition or "good",
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssignmentCreate' object has no attribute 'checked_out_condition'. Did you mean: 'checkout_condition'?
2025-05-19 17:23:50 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 500
2025-05-19 17:24:24 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:24:24 - app.routers.documents - INFO - POST /documents/
2025-05-19 17:24:24 - app.services.document_service - INFO - Creating document - asset_id: 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac, employee_id: None, type: DocumentType.WARRANTY
2025-05-19 17:24:24 - app.services.document_service - WARNING - Duplicate key error for file_url: https://storage.example.com/docs/aeron_warranty_cert_1716211983.pdf
2025-05-19 17:24:24 - app.routers.documents - WARNING - Validation error in create_new_document: Document with ID or name already exists
2025-05-19 17:24:24 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 17:24:37 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 17:24:37 - app.routers.assignment_history - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-19 17:24:37 - app.services.assignment_history_service - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to employee fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-19 17:24:37 - app.services.assignment_history_service - ERROR - Error assigning asset: 'AssignmentCreate' object has no attribute 'checked_out_condition'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\assignment_history_service.py", line 254, in assign_asset_to_employee
    "checked_out_condition": assignment.checked_out_condition or "good",
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssignmentCreate' object has no attribute 'checked_out_condition'. Did you mean: 'checkout_condition'?
2025-05-19 17:24:37 - app.routers.assignment_history - ERROR - Failed to assign asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac: 'AssignmentCreate' object has no attribute 'checked_out_condition'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\assignment_history.py", line 66, in assign_asset
    updated_asset = assign_asset_to_employee(collection, assignment)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\assignment_history_service.py", line 254, in assign_asset_to_employee
    "checked_out_condition": assignment.checked_out_condition or "good",
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssignmentCreate' object has no attribute 'checked_out_condition'. Did you mean: 'checkout_condition'?
2025-05-19 17:24:37 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 500
2025-05-19 17:28:10 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:28:10 - app.routers.documents - INFO - POST /documents/
2025-05-19 17:28:10 - app.services.document_service - INFO - Creating document - asset_id: 76ad2e00-5c0d-4e3c-9307-5114330e425c, employee_id: None, type: DocumentType.MANUAL
2025-05-19 17:28:10 - app.services.document_service - WARNING - Duplicate key error for file_url: https://storage.example.com/docs/cisco-catalyst-2960x-manual-e8f293a7dc146b89.pdf
2025-05-19 17:28:10 - app.routers.documents - WARNING - Validation error in create_new_document: Document with ID or name already exists
2025-05-19 17:28:10 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 17:28:17 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-19 17:28:25 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-19 17:28:25 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-19 17:28:25 - app.main - INFO - Registering routers with prefix /api
2025-05-19 17:28:25 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-19 17:28:25 - app.main - INFO - MongoDB connection verified successfully
2025-05-19 17:28:25 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-19 17:28:25 - app.main - INFO - All database indexes verified
2025-05-19 17:28:25 - app.main - INFO - Server started successfully!
2025-05-19 17:28:25 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-19 17:28:28 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:28:28 - app.routers.documents - INFO - POST /documents/
2025-05-19 17:28:28 - app.services.document_service - INFO - Creating document - asset_id: 76ad2e00-5c0d-4e3c-9307-5114330e425c, employee_id: None, type: DocumentType.MANUAL
2025-05-19 17:28:28 - app.services.document_service - WARNING - Duplicate key error for file_url: https://storage.example.com/docs/cisco-catalyst-2960x-manual-e8f293a7dc146b89.pdf
2025-05-19 17:28:28 - app.routers.documents - WARNING - Validation error in create_new_document: Document with ID or name already exists
2025-05-19 17:28:28 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 17:28:38 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:28:38 - app.routers.documents - INFO - POST /documents/
2025-05-19 17:28:38 - app.services.document_service - INFO - Creating document - asset_id: 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac, employee_id: None, type: DocumentType.MANUAL
2025-05-19 17:28:38 - app.services.document_service - WARNING - Duplicate key error for file_url: https://storage.example.com/docs/herman-miller-aeron-manual-5d7ac18f2e943b2c.pdf
2025-05-19 17:28:38 - app.routers.documents - WARNING - Validation error in create_new_document: Document with ID or name already exists
2025-05-19 17:28:38 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 17:28:53 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 17:28:53 - app.routers.assignment_history - INFO - Assigning asset 76ad2e00-5c0d-4e3c-9307-5114330e425c to 1be3bc7d-a769-4a40-b2ea-0d2dc1b57390
2025-05-19 17:28:53 - app.services.assignment_history_service - INFO - Assigning asset 76ad2e00-5c0d-4e3c-9307-5114330e425c to employee 1be3bc7d-a769-4a40-b2ea-0d2dc1b57390
2025-05-19 17:28:53 - app.services.assignment_history_service - ERROR - Error assigning asset: 'AssignmentCreate' object has no attribute 'checked_out_condition'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\assignment_history_service.py", line 254, in assign_asset_to_employee
    "checked_out_condition": assignment.checked_out_condition or "good",
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssignmentCreate' object has no attribute 'checked_out_condition'. Did you mean: 'checkout_condition'?
2025-05-19 17:28:53 - app.routers.assignment_history - ERROR - Failed to assign asset 76ad2e00-5c0d-4e3c-9307-5114330e425c: 'AssignmentCreate' object has no attribute 'checked_out_condition'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\assignment_history.py", line 66, in assign_asset
    updated_asset = assign_asset_to_employee(collection, assignment)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\assignment_history_service.py", line 254, in assign_asset_to_employee
    "checked_out_condition": assignment.checked_out_condition or "good",
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssignmentCreate' object has no attribute 'checked_out_condition'. Did you mean: 'checkout_condition'?
2025-05-19 17:28:53 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 500
2025-05-19 17:29:01 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 17:29:01 - app.routers.assignment_history - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-19 17:29:01 - app.services.assignment_history_service - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to employee fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-19 17:29:01 - app.services.assignment_history_service - ERROR - Error assigning asset: 'AssignmentCreate' object has no attribute 'checked_out_condition'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\assignment_history_service.py", line 254, in assign_asset_to_employee
    "checked_out_condition": assignment.checked_out_condition or "good",
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssignmentCreate' object has no attribute 'checked_out_condition'. Did you mean: 'checkout_condition'?
2025-05-19 17:29:01 - app.routers.assignment_history - ERROR - Failed to assign asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac: 'AssignmentCreate' object has no attribute 'checked_out_condition'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\assignment_history.py", line 66, in assign_asset
    updated_asset = assign_asset_to_employee(collection, assignment)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\assignment_history_service.py", line 254, in assign_asset_to_employee
    "checked_out_condition": assignment.checked_out_condition or "good",
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssignmentCreate' object has no attribute 'checked_out_condition'. Did you mean: 'checkout_condition'?
2025-05-19 17:29:01 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 500
2025-05-19 17:30:55 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:30:55 - app.routers.documents - INFO - POST /documents/
2025-05-19 17:30:55 - app.services.document_service - INFO - Creating document - asset_id: 76ad2e00-5c0d-4e3c-9307-5114330e425c, employee_id: None, type: DocumentType.MANUAL
2025-05-19 17:30:55 - app.services.document_service - WARNING - Duplicate key error for file_url: https://storage.example.com/docs/cisco_switch_doc_23_4a_78a3b291c47d5e98.pdf
2025-05-19 17:30:55 - app.routers.documents - WARNING - Validation error in create_new_document: Document with ID or name already exists
2025-05-19 17:30:55 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 17:31:05 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 17:31:05 - app.routers.assignment_history - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-19 17:31:05 - app.services.assignment_history_service - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to employee None
2025-05-19 17:31:05 - app.services.assignment_history_service - WARNING - Employee not found: None
2025-05-19 17:31:05 - app.routers.assignment_history - WARNING - Failed to assign asset: Employee with ID None not found
2025-05-19 17:31:05 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 400
2025-05-19 17:51:56 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-19 17:51:56 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-19 17:51:56 - app.main - INFO - Registering routers with prefix /api
2025-05-19 17:51:56 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-19 17:51:56 - app.main - INFO - MongoDB connection verified successfully
2025-05-19 17:51:56 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-19 17:51:56 - app.main - INFO - All database indexes verified
2025-05-19 17:51:56 - app.main - INFO - Server started successfully!
2025-05-19 17:51:56 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-19 17:52:00 - app.main - INFO - Request: POST /api/documents
2025-05-19 17:52:00 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:52:00 - app.routers.documents - INFO - POST /documents/
2025-05-19 17:52:00 - app.services.document_service - INFO - Creating document - asset_id: 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac, employee_id: None, type: DocumentType.WARRANTY
2025-05-19 17:52:00 - app.services.document_service - WARNING - Duplicate key error for file_url: https://storage.company.com/documents/warranties/aeron_chair_warranty.pdf
2025-05-19 17:52:00 - app.routers.documents - WARNING - Validation error in create_new_document: Document with ID or name already exists
2025-05-19 17:52:00 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 17:53:43 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-19 17:53:54 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-19 17:53:54 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-19 17:53:54 - app.main - INFO - Registering routers with prefix /api
2025-05-19 17:53:54 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-19 17:53:54 - app.main - INFO - MongoDB connection verified successfully
2025-05-19 17:53:54 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-19 17:53:54 - app.main - INFO - All database indexes verified
2025-05-19 17:53:54 - app.main - INFO - Server started successfully!
2025-05-19 17:53:54 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-19 17:54:29 - app.main - INFO - Request: POST /api/documents
2025-05-19 17:54:29 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:54:29 - app.routers.documents - INFO - POST /documents/
2025-05-19 17:54:29 - app.services.document_service - INFO - Creating document - asset_id: 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac, employee_id: None, type: DocumentType.WARRANTY
2025-05-19 17:54:29 - app.services.document_service - INFO - Made URL unique by adding timestamp: https://storage.company.com/documents/warranties/aeron_chair_warranty_1747657469192.pdf
2025-05-19 17:54:29 - app.services.document_service - WARNING - Still got duplicate key error, retrying with new ID: E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }, full error: {'index': 0, 'code': 11000, 'errmsg': 'E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }', 'keyPattern': {'id': 1}, 'keyValue': {'id': None}}
2025-05-19 17:54:29 - app.services.document_service - ERROR - Error retrying document creation: E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }, full error: {'index': 0, 'code': 11000, 'errmsg': 'E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }', 'keyPattern': {'id': 1}, 'keyValue': {'id': None}}
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\document_service.py", line 173, in create_document
    result = collection.insert_one(doc_dict)
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 870, in insert_one
    self._insert_one(
    ~~~~~~~~~~~~~~~~^
        document,
        ^^^^^^^^^
    ...<5 lines>...
        comment=comment,
        ^^^^^^^^^^^^^^^^
    ),
    ^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 810, in _insert_one
    self._database.client._retryable_write(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        acknowledged, _insert_command, session, operation=_Op.INSERT
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1898, in _retryable_write
    return self._retry_with_session(retryable, func, s, bulk, operation, operation_id)
           ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1784, in _retry_with_session
    return self._retry_internal(
           ~~~~~~~~~~~~~~~~~~~~^
        func=func,
        ^^^^^^^^^^
    ...<4 lines>...
        operation_id=operation_id,
        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\_csot.py", line 120, in csot_wrapper
    return func(self, *args, **kwargs)
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1830, in _retry_internal
    ).run()
      ~~~^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 2554, in run
    return self._read() if self._is_read else self._write()
                                              ~~~~~~~~~~~^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 2676, in _write
    return self._func(self._session, conn, self._retryable)  # type: ignore
           ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 808, in _insert_command
    _check_write_command_response(result)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\helpers_shared.py", line 285, in _check_write_command_response
    _raise_last_write_error(write_errors)
    ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\helpers_shared.py", line 255, in _raise_last_write_error
    raise DuplicateKeyError(error.get("errmsg"), 11000, error)
pymongo.errors.DuplicateKeyError: E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }, full error: {'index': 0, 'code': 11000, 'errmsg': 'E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }', 'keyPattern': {'id': 1}, 'keyValue': {'id': None}}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\document_service.py", line 216, in create_document
    result = collection.insert_one(doc_dict)
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 870, in insert_one
    self._insert_one(
    ~~~~~~~~~~~~~~~~^
        document,
        ^^^^^^^^^
    ...<5 lines>...
        comment=comment,
        ^^^^^^^^^^^^^^^^
    ),
    ^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 810, in _insert_one
    self._database.client._retryable_write(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        acknowledged, _insert_command, session, operation=_Op.INSERT
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1898, in _retryable_write
    return self._retry_with_session(retryable, func, s, bulk, operation, operation_id)
           ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1784, in _retry_with_session
    return self._retry_internal(
           ~~~~~~~~~~~~~~~~~~~~^
        func=func,
        ^^^^^^^^^^
    ...<4 lines>...
        operation_id=operation_id,
        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\_csot.py", line 120, in csot_wrapper
    return func(self, *args, **kwargs)
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1830, in _retry_internal
    ).run()
      ~~~^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 2554, in run
    return self._read() if self._is_read else self._write()
                                              ~~~~~~~~~~~^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 2676, in _write
    return self._func(self._session, conn, self._retryable)  # type: ignore
           ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 808, in _insert_command
    _check_write_command_response(result)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\helpers_shared.py", line 285, in _check_write_command_response
    _raise_last_write_error(write_errors)
    ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\helpers_shared.py", line 255, in _raise_last_write_error
    raise DuplicateKeyError(error.get("errmsg"), 11000, error)
pymongo.errors.DuplicateKeyError: E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }, full error: {'index': 0, 'code': 11000, 'errmsg': 'E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }', 'keyPattern': {'id': 1}, 'keyValue': {'id': None}}
2025-05-19 17:54:29 - app.routers.documents - WARNING - Validation error in create_new_document: Could not create document after retry: E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }, full error: {'index': 0, 'code': 11000, 'errmsg': 'E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }', 'keyPattern': {'id': 1}, 'keyValue': {'id': None}}
2025-05-19 17:54:29 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 17:54:45 - app.main - INFO - Request: POST /api/documents
2025-05-19 17:54:45 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:54:45 - app.routers.documents - INFO - POST /documents/
2025-05-19 17:54:45 - app.services.document_service - INFO - Creating document - asset_id: None, employee_id: 1be3bc7d-a769-4a40-b2ea-0d2dc1b57390, type: DocumentType.CERTIFICATE
2025-05-19 17:54:45 - app.services.document_service - INFO - Made URL unique by adding timestamp: https://storage.company.com/documents/certifications/david_garcia_ccna_1747657485246.pdf
2025-05-19 17:54:45 - app.services.document_service - WARNING - Still got duplicate key error, retrying with new ID: E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }, full error: {'index': 0, 'code': 11000, 'errmsg': 'E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }', 'keyPattern': {'id': 1}, 'keyValue': {'id': None}}
2025-05-19 17:54:45 - app.services.document_service - ERROR - Error retrying document creation: E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }, full error: {'index': 0, 'code': 11000, 'errmsg': 'E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }', 'keyPattern': {'id': 1}, 'keyValue': {'id': None}}
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\document_service.py", line 173, in create_document
    result = collection.insert_one(doc_dict)
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 870, in insert_one
    self._insert_one(
    ~~~~~~~~~~~~~~~~^
        document,
        ^^^^^^^^^
    ...<5 lines>...
        comment=comment,
        ^^^^^^^^^^^^^^^^
    ),
    ^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 810, in _insert_one
    self._database.client._retryable_write(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        acknowledged, _insert_command, session, operation=_Op.INSERT
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1898, in _retryable_write
    return self._retry_with_session(retryable, func, s, bulk, operation, operation_id)
           ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1784, in _retry_with_session
    return self._retry_internal(
           ~~~~~~~~~~~~~~~~~~~~^
        func=func,
        ^^^^^^^^^^
    ...<4 lines>...
        operation_id=operation_id,
        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\_csot.py", line 120, in csot_wrapper
    return func(self, *args, **kwargs)
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1830, in _retry_internal
    ).run()
      ~~~^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 2554, in run
    return self._read() if self._is_read else self._write()
                                              ~~~~~~~~~~~^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 2676, in _write
    return self._func(self._session, conn, self._retryable)  # type: ignore
           ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 808, in _insert_command
    _check_write_command_response(result)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\helpers_shared.py", line 285, in _check_write_command_response
    _raise_last_write_error(write_errors)
    ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\helpers_shared.py", line 255, in _raise_last_write_error
    raise DuplicateKeyError(error.get("errmsg"), 11000, error)
pymongo.errors.DuplicateKeyError: E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }, full error: {'index': 0, 'code': 11000, 'errmsg': 'E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }', 'keyPattern': {'id': 1}, 'keyValue': {'id': None}}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\document_service.py", line 216, in create_document
    result = collection.insert_one(doc_dict)
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 870, in insert_one
    self._insert_one(
    ~~~~~~~~~~~~~~~~^
        document,
        ^^^^^^^^^
    ...<5 lines>...
        comment=comment,
        ^^^^^^^^^^^^^^^^
    ),
    ^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 810, in _insert_one
    self._database.client._retryable_write(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        acknowledged, _insert_command, session, operation=_Op.INSERT
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1898, in _retryable_write
    return self._retry_with_session(retryable, func, s, bulk, operation, operation_id)
           ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1784, in _retry_with_session
    return self._retry_internal(
           ~~~~~~~~~~~~~~~~~~~~^
        func=func,
        ^^^^^^^^^^
    ...<4 lines>...
        operation_id=operation_id,
        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\_csot.py", line 120, in csot_wrapper
    return func(self, *args, **kwargs)
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1830, in _retry_internal
    ).run()
      ~~~^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 2554, in run
    return self._read() if self._is_read else self._write()
                                              ~~~~~~~~~~~^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 2676, in _write
    return self._func(self._session, conn, self._retryable)  # type: ignore
           ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 808, in _insert_command
    _check_write_command_response(result)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\helpers_shared.py", line 285, in _check_write_command_response
    _raise_last_write_error(write_errors)
    ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\helpers_shared.py", line 255, in _raise_last_write_error
    raise DuplicateKeyError(error.get("errmsg"), 11000, error)
pymongo.errors.DuplicateKeyError: E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }, full error: {'index': 0, 'code': 11000, 'errmsg': 'E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }', 'keyPattern': {'id': 1}, 'keyValue': {'id': None}}
2025-05-19 17:54:45 - app.routers.documents - WARNING - Validation error in create_new_document: Could not create document after retry: E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }, full error: {'index': 0, 'code': 11000, 'errmsg': 'E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }', 'keyPattern': {'id': 1}, 'keyValue': {'id': None}}
2025-05-19 17:54:45 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 17:54:53 - app.main - INFO - Request: POST /api/documents
2025-05-19 17:54:53 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:54:53 - app.routers.documents - INFO - POST /documents/
2025-05-19 17:54:53 - app.services.document_service - INFO - Creating document - asset_id: 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac, employee_id: fefbcf5d-90a8-4129-9272-8413b843212a, type: DocumentType.CONTRACT
2025-05-19 17:54:53 - app.services.document_service - INFO - Made URL unique by adding timestamp: https://storage.company.com/documents/assignments/chair_assignment_michael_brown_1747657493313.pdf
2025-05-19 17:54:53 - app.services.document_service - WARNING - Still got duplicate key error, retrying with new ID: E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }, full error: {'index': 0, 'code': 11000, 'errmsg': 'E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }', 'keyPattern': {'id': 1}, 'keyValue': {'id': None}}
2025-05-19 17:54:53 - app.services.document_service - ERROR - Error retrying document creation: E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }, full error: {'index': 0, 'code': 11000, 'errmsg': 'E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }', 'keyPattern': {'id': 1}, 'keyValue': {'id': None}}
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\document_service.py", line 173, in create_document
    result = collection.insert_one(doc_dict)
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 870, in insert_one
    self._insert_one(
    ~~~~~~~~~~~~~~~~^
        document,
        ^^^^^^^^^
    ...<5 lines>...
        comment=comment,
        ^^^^^^^^^^^^^^^^
    ),
    ^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 810, in _insert_one
    self._database.client._retryable_write(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        acknowledged, _insert_command, session, operation=_Op.INSERT
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1898, in _retryable_write
    return self._retry_with_session(retryable, func, s, bulk, operation, operation_id)
           ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1784, in _retry_with_session
    return self._retry_internal(
           ~~~~~~~~~~~~~~~~~~~~^
        func=func,
        ^^^^^^^^^^
    ...<4 lines>...
        operation_id=operation_id,
        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\_csot.py", line 120, in csot_wrapper
    return func(self, *args, **kwargs)
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1830, in _retry_internal
    ).run()
      ~~~^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 2554, in run
    return self._read() if self._is_read else self._write()
                                              ~~~~~~~~~~~^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 2676, in _write
    return self._func(self._session, conn, self._retryable)  # type: ignore
           ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 808, in _insert_command
    _check_write_command_response(result)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\helpers_shared.py", line 285, in _check_write_command_response
    _raise_last_write_error(write_errors)
    ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\helpers_shared.py", line 255, in _raise_last_write_error
    raise DuplicateKeyError(error.get("errmsg"), 11000, error)
pymongo.errors.DuplicateKeyError: E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }, full error: {'index': 0, 'code': 11000, 'errmsg': 'E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }', 'keyPattern': {'id': 1}, 'keyValue': {'id': None}}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\document_service.py", line 216, in create_document
    result = collection.insert_one(doc_dict)
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 870, in insert_one
    self._insert_one(
    ~~~~~~~~~~~~~~~~^
        document,
        ^^^^^^^^^
    ...<5 lines>...
        comment=comment,
        ^^^^^^^^^^^^^^^^
    ),
    ^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 810, in _insert_one
    self._database.client._retryable_write(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        acknowledged, _insert_command, session, operation=_Op.INSERT
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1898, in _retryable_write
    return self._retry_with_session(retryable, func, s, bulk, operation, operation_id)
           ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1784, in _retry_with_session
    return self._retry_internal(
           ~~~~~~~~~~~~~~~~~~~~^
        func=func,
        ^^^^^^^^^^
    ...<4 lines>...
        operation_id=operation_id,
        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\_csot.py", line 120, in csot_wrapper
    return func(self, *args, **kwargs)
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 1830, in _retry_internal
    ).run()
      ~~~^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 2554, in run
    return self._read() if self._is_read else self._write()
                                              ~~~~~~~~~~~^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\mongo_client.py", line 2676, in _write
    return self._func(self._session, conn, self._retryable)  # type: ignore
           ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 808, in _insert_command
    _check_write_command_response(result)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\helpers_shared.py", line 285, in _check_write_command_response
    _raise_last_write_error(write_errors)
    ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\helpers_shared.py", line 255, in _raise_last_write_error
    raise DuplicateKeyError(error.get("errmsg"), 11000, error)
pymongo.errors.DuplicateKeyError: E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }, full error: {'index': 0, 'code': 11000, 'errmsg': 'E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }', 'keyPattern': {'id': 1}, 'keyValue': {'id': None}}
2025-05-19 17:54:53 - app.routers.documents - WARNING - Validation error in create_new_document: Could not create document after retry: E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }, full error: {'index': 0, 'code': 11000, 'errmsg': 'E11000 duplicate key error collection: asset_management.documents index: id_1 dup key: { id: null }', 'keyPattern': {'id': 1}, 'keyValue': {'id': None}}
2025-05-19 17:54:53 - app.main - WARNING - Request failed: POST /api/documents/ - Status: 400
2025-05-19 17:57:41 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-19 17:57:53 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-19 17:57:53 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-19 17:57:53 - app.main - INFO - Registering routers with prefix /api
2025-05-19 17:57:53 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-19 17:57:53 - app.main - INFO - MongoDB connection verified successfully
2025-05-19 17:57:53 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-19 17:57:53 - app.main - INFO - All database indexes verified
2025-05-19 17:57:53 - app.main - INFO - Server started successfully!
2025-05-19 17:57:53 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-19 17:57:59 - app.main - INFO - Request: POST /api/documents
2025-05-19 17:57:59 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:57:59 - app.routers.documents - INFO - POST /documents/
2025-05-19 17:57:59 - app.services.document_service - INFO - Creating document - asset_id: 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac, employee_id: None, type: DocumentType.WARRANTY
2025-05-19 17:57:59 - app.services.document_service - INFO - Made URL unique by adding timestamp: https://storage.company.com/documents/warranties/aeron_chair_warranty_1747657679346.pdf
2025-05-19 17:57:59 - app.services.document_service - INFO - Created document with ID: DOC-103721D5
2025-05-19 17:58:08 - app.main - INFO - Request: POST /api/documents
2025-05-19 17:58:08 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:58:08 - app.routers.documents - INFO - POST /documents/
2025-05-19 17:58:08 - app.services.document_service - INFO - Creating document - asset_id: None, employee_id: 1be3bc7d-a769-4a40-b2ea-0d2dc1b57390, type: DocumentType.CERTIFICATE
2025-05-19 17:58:08 - app.services.document_service - INFO - Made URL unique by adding timestamp: https://storage.company.com/documents/certifications/david_garcia_ccna_1747657688339.pdf
2025-05-19 17:58:08 - app.services.document_service - INFO - Created document with ID: DOC-6E4B461D
2025-05-19 17:58:18 - app.main - INFO - Request: POST /api/documents
2025-05-19 17:58:18 - app.main - INFO - Request: POST /api/documents/
2025-05-19 17:58:18 - app.routers.documents - INFO - POST /documents/
2025-05-19 17:58:18 - app.services.document_service - INFO - Creating document - asset_id: 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac, employee_id: fefbcf5d-90a8-4129-9272-8413b843212a, type: DocumentType.CONTRACT
2025-05-19 17:58:18 - app.services.document_service - INFO - Made URL unique by adding timestamp: https://storage.company.com/documents/assignments/chair_assignment_michael_brown_1747657698982.pdf
2025-05-19 17:58:19 - app.services.document_service - INFO - Created document with ID: DOC-70C3A29B
2025-05-19 18:02:04 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-19 18:02:13 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-19 18:02:13 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-19 18:02:13 - app.main - INFO - Registering routers with prefix /api
2025-05-19 18:02:13 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-19 18:02:13 - app.main - INFO - MongoDB connection verified successfully
2025-05-19 18:02:13 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-19 18:02:14 - app.main - INFO - All database indexes verified
2025-05-19 18:02:14 - app.main - INFO - Server started successfully!
2025-05-19 18:02:14 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-19 18:02:41 - app.main - INFO - Request: POST /api/requests
2025-05-19 18:02:41 - app.main - INFO - Request: POST /api/requests/
2025-05-19 18:02:41 - app.routers.request - INFO - POST /requests/ - type: RequestType.ASSIGNMENT_APPROVAL
2025-05-19 18:07:26 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 18:07:26 - app.routers.assignment_history - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-19 18:07:26 - app.services.assignment_history_service - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to employee fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-19 18:07:26 - app.services.assignment_history_service - ERROR - Error assigning asset: 'AssignmentCreate' object has no attribute 'checked_out_condition'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\assignment_history_service.py", line 254, in assign_asset_to_employee
    "checked_out_condition": assignment.checked_out_condition or "good",
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssignmentCreate' object has no attribute 'checked_out_condition'. Did you mean: 'checkout_condition'?
2025-05-19 18:07:26 - app.routers.assignment_history - ERROR - Failed to assign asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac: 'AssignmentCreate' object has no attribute 'checked_out_condition'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\assignment_history.py", line 66, in assign_asset
    updated_asset = assign_asset_to_employee(collection, assignment)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\assignment_history_service.py", line 254, in assign_asset_to_employee
    "checked_out_condition": assignment.checked_out_condition or "good",
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssignmentCreate' object has no attribute 'checked_out_condition'. Did you mean: 'checkout_condition'?
2025-05-19 18:07:26 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 500
2025-05-19 18:07:40 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-19 18:07:49 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-19 18:07:49 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-19 18:07:49 - app.main - INFO - Registering routers with prefix /api
2025-05-19 18:07:49 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-19 18:07:49 - app.main - INFO - MongoDB connection verified successfully
2025-05-19 18:07:49 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-19 18:07:49 - app.main - INFO - All database indexes verified
2025-05-19 18:07:49 - app.main - INFO - Server started successfully!
2025-05-19 18:07:49 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-19 18:07:53 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 18:07:53 - app.routers.assignment_history - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-19 18:07:53 - app.services.assignment_history_service - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to employee fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-19 18:07:53 - app.services.assignment_history_service - ERROR - Error assigning asset: 'AssignmentCreate' object has no attribute 'checked_out_condition'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\assignment_history_service.py", line 254, in assign_asset_to_employee
    "checked_out_condition": assignment.checked_out_condition or "good",
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssignmentCreate' object has no attribute 'checked_out_condition'. Did you mean: 'checkout_condition'?
2025-05-19 18:07:53 - app.routers.assignment_history - ERROR - Failed to assign asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac: 'AssignmentCreate' object has no attribute 'checked_out_condition'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\assignment_history.py", line 66, in assign_asset
    updated_asset = assign_asset_to_employee(collection, assignment)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\assignment_history_service.py", line 254, in assign_asset_to_employee
    "checked_out_condition": assignment.checked_out_condition or "good",
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssignmentCreate' object has no attribute 'checked_out_condition'. Did you mean: 'checkout_condition'?
2025-05-19 18:07:53 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 500
2025-05-19 18:08:08 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 18:08:08 - app.routers.assignment_history - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-19 18:08:08 - app.services.assignment_history_service - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to employee fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-19 18:08:08 - app.services.assignment_history_service - ERROR - Error assigning asset: 'AssignmentCreate' object has no attribute 'checked_out_condition'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\assignment_history_service.py", line 254, in assign_asset_to_employee
    "checked_out_condition": assignment.checked_out_condition or "good",
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssignmentCreate' object has no attribute 'checked_out_condition'. Did you mean: 'checkout_condition'?
2025-05-19 18:08:08 - app.routers.assignment_history - ERROR - Failed to assign asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac: 'AssignmentCreate' object has no attribute 'checked_out_condition'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\assignment_history.py", line 66, in assign_asset
    updated_asset = assign_asset_to_employee(collection, assignment)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\assignment_history_service.py", line 254, in assign_asset_to_employee
    "checked_out_condition": assignment.checked_out_condition or "good",
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssignmentCreate' object has no attribute 'checked_out_condition'. Did you mean: 'checkout_condition'?
2025-05-19 18:08:08 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 500
2025-05-19 18:08:14 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 18:08:14 - app.routers.assignment_history - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to 1be3bc7d-a769-4a40-b2ea-0d2dc1b57390
2025-05-19 18:08:14 - app.services.assignment_history_service - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to employee 1be3bc7d-a769-4a40-b2ea-0d2dc1b57390
2025-05-19 18:08:14 - app.services.assignment_history_service - ERROR - Error assigning asset: 'AssignmentCreate' object has no attribute 'checked_out_condition'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\assignment_history_service.py", line 254, in assign_asset_to_employee
    "checked_out_condition": assignment.checked_out_condition or "good",
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssignmentCreate' object has no attribute 'checked_out_condition'. Did you mean: 'checkout_condition'?
2025-05-19 18:08:14 - app.routers.assignment_history - ERROR - Failed to assign asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac: 'AssignmentCreate' object has no attribute 'checked_out_condition'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\assignment_history.py", line 66, in assign_asset
    updated_asset = assign_asset_to_employee(collection, assignment)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\assignment_history_service.py", line 254, in assign_asset_to_employee
    "checked_out_condition": assignment.checked_out_condition or "good",
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssignmentCreate' object has no attribute 'checked_out_condition'. Did you mean: 'checkout_condition'?
2025-05-19 18:08:14 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 500
2025-05-19 18:08:31 - app.main - INFO - Request: POST /api/assignment-history/unassign
2025-05-19 18:08:31 - app.routers.assignment_history - INFO - Unassigning asset with assignment ID ASSIGNMENT_ID_FROM_RESPONSE
2025-05-19 18:08:31 - app.routers.assignment_history - ERROR - Failed to unassign assignment ASSIGNMENT_ID_FROM_RESPONSE: 'AssignmentReturn' object has no attribute 'asset_id'
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\assignment_history.py", line 93, in unassign_asset
    updated_asset = unassign_employee_from_asset(collection, return_data)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\assignment_history_service.py", line 354, in unassign_employee_from_asset
    logger.info(f"Unassigning asset {assignment.asset_id}")
                                     ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 892, in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
AttributeError: 'AssignmentReturn' object has no attribute 'asset_id'
2025-05-19 18:08:31 - app.main - WARNING - Request failed: POST /api/assignment-history/unassign - Status: 500
2025-05-19 18:11:53 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 18:11:53 - app.routers.assignment_history - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-19 18:11:53 - app.services.assignment_history_service - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to employee None
2025-05-19 18:11:53 - app.services.assignment_history_service - WARNING - Employee not found: None
2025-05-19 18:11:53 - app.routers.assignment_history - WARNING - Failed to assign asset: Employee with ID None not found
2025-05-19 18:11:53 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 400
2025-05-19 18:12:06 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-19 18:12:14 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-19 18:12:14 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-19 18:12:14 - app.main - INFO - Registering routers with prefix /api
2025-05-19 18:12:14 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-19 18:12:14 - app.main - INFO - MongoDB connection verified successfully
2025-05-19 18:12:14 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-19 18:12:15 - app.main - INFO - All database indexes verified
2025-05-19 18:12:15 - app.main - INFO - Server started successfully!
2025-05-19 18:12:15 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-19 18:12:18 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 18:12:18 - app.routers.assignment_history - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-19 18:12:18 - app.services.assignment_history_service - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to employee fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-19 18:12:18 - app.services.assignment_history_service - INFO - Updated asset status to assigned: 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac
2025-05-19 18:12:18 - app.services.assignment_history_service - INFO - Updated employee has_assigned_assets: fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-19 18:12:18 - app.routers.assignment_history - WARNING - Failed to assign asset: 9 validation errors for AssetItem
current_assignment_date
  Input should be a valid string [type=string_type, input_value=datetime.datetime(2025, 5, 19, 12, 42, 18, 574000), input_type=datetime]
    For further information visit https://errors.pydantic.dev/2.10/v/string_type
documents.0.doc_id
  Field required [type=missing, input_value={'id': 'DOC-103721D5', 'n...ument_type': 'warranty'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/missing
documents.0.type
  Field required [type=missing, input_value={'id': 'DOC-103721D5', 'n...ument_type': 'warranty'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/missing
documents.0.url
  Field required [type=missing, input_value={'id': 'DOC-103721D5', 'n...ument_type': 'warranty'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/missing
documents.0.upload_date
  Field required [type=missing, input_value={'id': 'DOC-103721D5', 'n...ument_type': 'warranty'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/missing
documents.1.doc_id
  Field required [type=missing, input_value={'id': 'DOC-70C3A29B', 'n...ument_type': 'contract'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/missing
documents.1.type
  Field required [type=missing, input_value={'id': 'DOC-70C3A29B', 'n...ument_type': 'contract'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/missing
documents.1.url
  Field required [type=missing, input_value={'id': 'DOC-70C3A29B', 'n...ument_type': 'contract'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/missing
documents.1.upload_date
  Field required [type=missing, input_value={'id': 'DOC-70C3A29B', 'n...ument_type': 'contract'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/missing
2025-05-19 18:12:18 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 400
2025-05-19 18:12:34 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 18:12:34 - app.routers.assignment_history - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-19 18:12:34 - app.services.assignment_history_service - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to employee fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-19 18:12:34 - app.services.assignment_history_service - WARNING - Asset already assigned: 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac
2025-05-19 18:12:34 - app.routers.assignment_history - WARNING - Failed to assign asset: Asset with ID 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac is already assigned
2025-05-19 18:12:34 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 400
2025-05-19 18:12:42 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-19 18:12:42 - app.routers.assignment_history - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to 1be3bc7d-a769-4a40-b2ea-0d2dc1b57390
2025-05-19 18:12:42 - app.services.assignment_history_service - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to employee 1be3bc7d-a769-4a40-b2ea-0d2dc1b57390
2025-05-19 18:12:42 - app.services.assignment_history_service - WARNING - Asset already assigned: 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac
2025-05-19 18:12:42 - app.routers.assignment_history - WARNING - Failed to assign asset: Asset with ID 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac is already assigned
2025-05-19 18:12:42 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 400
2025-05-19 18:14:44 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-19 18:14:57 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-19 18:14:57 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-19 18:14:57 - app.main - INFO - Registering routers with prefix /api
2025-05-19 18:14:57 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-19 18:14:57 - app.main - INFO - MongoDB connection verified successfully
2025-05-19 18:14:57 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-19 18:14:57 - app.main - INFO - All database indexes verified
2025-05-19 18:14:57 - app.main - INFO - Server started successfully!
2025-05-19 18:14:57 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-20 15:00:33 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-20 15:00:33 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 422
2025-05-20 15:00:42 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-20 15:00:42 - app.main - WARNING - Request failed: POST /api/assignment-history/assign - Status: 422
2025-05-20 15:00:45 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-20 15:00:59 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-20 15:00:59 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-20 15:00:59 - app.main - INFO - Registering routers with prefix /api
2025-05-20 15:00:59 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-20 15:00:59 - app.main - INFO - MongoDB connection verified successfully
2025-05-20 15:01:00 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-20 15:01:00 - app.main - INFO - All database indexes verified
2025-05-20 15:01:00 - app.main - INFO - Server started successfully!
2025-05-20 15:01:00 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-20 15:01:07 - app.main - INFO - Request: POST /api/assignment-history/assign
2025-05-20 15:01:07 - app.routers.assignment_history - INFO - Assigning asset 4d38e2ff-9d4d-482b-9d8c-429022d0f1ac to fefbcf5d-90a8-4129-9272-8413b843212a
2025-05-20 15:01:29 - app.main - INFO - Request: POST /api/assignment-history/unassign
2025-05-20 15:01:29 - app.routers.assignment_history - INFO - Unassigning asset with assignment ID ASSIGNMENT_ID_FROM_RESPONSE
2025-05-20 15:01:29 - app.main - WARNING - Request failed: POST /api/assignment-history/unassign - Status: 404
2025-05-20 15:02:10 - app.main - INFO - Request: POST /api/assignment-history/unassign
2025-05-20 15:02:10 - app.routers.assignment_history - INFO - Unassigning asset with assignment ID 829813ac-2c2a-4e14-bd79-372267c4bf23
2025-05-20 15:12:49 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-20 15:13:00 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-20 15:13:00 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-20 15:13:00 - app.main - INFO - Registering routers with prefix /api
2025-05-20 15:13:00 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-20 15:13:00 - app.main - INFO - MongoDB connection verified successfully
2025-05-20 15:13:00 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-20 15:13:00 - app.main - INFO - All database indexes verified
2025-05-20 15:13:00 - app.main - INFO - Server started successfully!
2025-05-20 15:13:00 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-20 17:20:56 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-20 17:21:07 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-20 17:21:07 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-20 17:21:07 - app.main - INFO - Registering routers with prefix /api
2025-05-20 17:21:07 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-20 17:21:07 - app.main - INFO - MongoDB connection verified successfully
2025-05-20 17:21:07 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-20 17:21:07 - app.main - INFO - All database indexes verified
2025-05-20 17:21:07 - app.main - INFO - Server started successfully!
2025-05-20 17:21:07 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-20 17:25:42 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-20 17:25:51 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-20 17:25:51 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-20 17:25:51 - app.main - INFO - Registering routers with prefix /api
2025-05-20 17:25:51 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-20 17:25:51 - app.main - INFO - MongoDB connection verified successfully
2025-05-20 17:25:51 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-20 17:25:51 - app.main - INFO - All database indexes verified
2025-05-20 17:25:51 - app.main - INFO - Server started successfully!
2025-05-20 17:25:51 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-20 17:30:43 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-20 17:30:43 - uvicorn.error - ERROR - Traceback (most recent call last):
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\asyncio\runners.py", line 194, in run
    return runner.run(main)
           ~~~~~~~~~~^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\asyncio\runners.py", line 118, in run
    return self._loop.run_until_complete(task)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\asyncio\base_events.py", line 707, in run_until_complete
    self.run_forever()
    ~~~~~~~~~~~~~~~~^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\asyncio\base_events.py", line 678, in run_forever
    self._run_once()
    ~~~~~~~~~~~~~~^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\asyncio\base_events.py", line 2033, in _run_once
    handle._run()
    ~~~~~~~~~~~^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\asyncio\events.py", line 89, in _run
    self._context.run(self._callback, *self._args)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\uvicorn\server.py", line 69, in serve
    with self.capture_signals():
         ~~~~~~~~~~~~~~~~~~~~^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\contextlib.py", line 148, in __exit__
    next(self.gen)
    ~~~~^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\uvicorn\server.py", line 330, in capture_signals
    signal.raise_signal(captured_signal)
    ~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\asyncio\runners.py", line 157, in _on_sigint
    raise KeyboardInterrupt()
KeyboardInterrupt

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\routing.py", line 700, in lifespan
    await receive()
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\uvicorn\lifespan\on.py", line 137, in receive
    return await self.receive_queue.get()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\asyncio\queues.py", line 186, in get
    await getter
asyncio.exceptions.CancelledError

2025-05-20 17:30:52 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-20 17:30:52 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-20 17:30:52 - app.main - INFO - Registering routers with prefix /api
2025-05-20 17:30:52 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-20 17:30:52 - app.main - INFO - MongoDB connection verified successfully
2025-05-20 17:30:52 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-20 17:30:53 - app.main - INFO - All database indexes verified
2025-05-20 17:30:53 - app.main - INFO - Server started successfully!
2025-05-20 17:30:53 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-20 17:31:11 - app.main - INFO - Request: GET /api/asset-categories
2025-05-20 17:31:11 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-20 17:31:11 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-20 17:31:11 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-20 17:31:11 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:31:11 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:31:11 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-20 17:31:12 - app.main - INFO - Request: GET /api/asset-categories
2025-05-20 17:31:12 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-20 17:31:12 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-20 17:31:12 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-20 17:31:12 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:31:12 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:31:12 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-20 17:31:14 - app.main - INFO - Request: GET /api/asset-categories
2025-05-20 17:31:14 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-20 17:31:14 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-20 17:31:14 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-20 17:31:14 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:31:14 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:31:14 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-20 17:31:17 - app.main - INFO - Request: GET /api/asset-categories
2025-05-20 17:31:17 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-20 17:31:17 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-20 17:31:17 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-20 17:31:17 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:31:17 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:31:17 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-20 17:32:42 - app.main - INFO - Request: GET /api/asset-categories
2025-05-20 17:32:42 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-20 17:32:42 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-20 17:32:42 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-20 17:32:42 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:32:42 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:32:42 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-20 17:32:44 - app.main - INFO - Request: GET /api/asset-categories
2025-05-20 17:32:44 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-20 17:32:44 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-20 17:32:44 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-20 17:32:44 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:32:44 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:32:44 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-20 17:32:45 - app.main - INFO - Request: GET /api/asset-categories
2025-05-20 17:32:45 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-20 17:32:45 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-20 17:32:45 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-20 17:32:45 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:32:45 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:32:45 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-20 17:32:48 - app.main - INFO - Request: GET /api/asset-categories
2025-05-20 17:32:48 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-20 17:32:48 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-20 17:32:48 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-20 17:32:48 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:32:48 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:32:48 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-20 17:32:58 - app.main - INFO - Request: GET /api/asset-categories
2025-05-20 17:32:58 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-20 17:32:58 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-20 17:32:58 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-20 17:32:58 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:32:58 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:32:58 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-20 17:32:59 - app.main - INFO - Request: GET /api/asset-categories
2025-05-20 17:32:59 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-20 17:32:59 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-20 17:32:59 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-20 17:32:59 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:32:59 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:32:59 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-20 17:33:00 - app.main - INFO - Request: GET /api/asset-categories
2025-05-20 17:33:00 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-20 17:33:00 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-20 17:33:00 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-20 17:33:00 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:33:00 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:33:00 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-20 17:33:01 - app.main - INFO - Request: GET /api/asset-categories
2025-05-20 17:33:01 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-20 17:33:01 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-20 17:33:01 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-20 17:33:01 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:33:01 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:33:01 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-20 17:33:02 - app.main - INFO - Request: GET /api/asset-categories
2025-05-20 17:33:02 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-20 17:33:02 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-20 17:33:02 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-20 17:33:02 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:33:02 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:33:02 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-20 17:33:03 - app.main - INFO - Request: GET /api/asset-categories
2025-05-20 17:33:03 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-20 17:33:03 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-20 17:33:03 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-20 17:33:03 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:33:03 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:33:03 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-20 17:33:05 - app.main - INFO - Request: GET /api/asset-categories
2025-05-20 17:33:05 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-20 17:33:05 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-20 17:33:05 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-20 17:33:05 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:33:05 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:33:05 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-20 17:33:06 - app.main - INFO - Request: GET /api/asset-categories
2025-05-20 17:33:06 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-20 17:33:06 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-20 17:33:06 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-20 17:33:06 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:33:06 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:33:06 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-20 17:33:36 - app.main - INFO - Request: GET /api/asset-categories
2025-05-20 17:33:36 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-20 17:33:36 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-20 17:33:36 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-20 17:33:36 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:33:36 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:33:36 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-20 17:33:37 - app.main - INFO - Request: GET /api/asset-categories
2025-05-20 17:33:37 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-20 17:33:37 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-20 17:33:37 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-20 17:33:37 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:33:37 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:33:37 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-20 17:33:40 - app.main - INFO - Request: GET /api/asset-categories
2025-05-20 17:33:40 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-20 17:33:40 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-20 17:33:40 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-20 17:33:40 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:33:40 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:33:40 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-20 17:33:42 - app.main - INFO - Request: GET /api/asset-categories
2025-05-20 17:33:42 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-20 17:33:42 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-20 17:33:42 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-20 17:33:42 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:33:42 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:33:42 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-20 17:34:12 - app.main - INFO - Request: GET /debug/list-categories
2025-05-20 17:34:12 - app.main - WARNING - Request failed: GET /debug/list-categories - Status: 404
2025-05-20 17:34:41 - app.main - INFO - Request: GET /api/asset-categories
2025-05-20 17:34:41 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-20 17:34:41 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-20 17:34:41 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-20 17:34:41 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:34:41 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-20 17:34:41 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-20 17:37:07 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-20 17:37:07 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-20 17:37:07 - app.main - INFO - Registering routers with prefix /api
2025-05-20 17:37:07 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-20 17:37:07 - app.main - INFO - MongoDB connection verified successfully
2025-05-20 17:37:08 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-20 17:37:08 - app.main - INFO - All database indexes verified
2025-05-20 17:37:08 - app.main - INFO - Server started successfully!
2025-05-20 17:37:08 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-20 17:37:24 - app.main - INFO - Request: GET /api/asset-categories
2025-05-20 17:37:24 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-20 17:37:24 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-20 17:37:24 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-20 17:37:29 - app.main - INFO - Request: POST /debug/add-sample-categories
2025-05-20 17:37:29 - app.main - INFO - Adding sample asset categories
2025-05-20 17:37:46 - app.main - INFO - Request: GET /debug/list-categories
2025-05-20 17:37:46 - app.main - INFO - Debug: Listing all asset categories
2025-05-20 17:37:47 - app.main - INFO - Found 6 categories in the database
2025-05-20 17:38:01 - app.main - INFO - Request: GET /api/asset-categories
2025-05-20 17:38:01 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-20 17:38:01 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-20 17:38:01 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-20 17:38:24 - app.main - INFO - Request: GET /api/assignment-history/asset/asst001
2025-05-20 17:38:24 - app.routers.assignment_history - INFO - Fetching assignment history for asset asst001
2025-05-20 17:38:24 - app.services.assignment_history_service - INFO - Fetching assignment history for asset ID: asst001
2025-05-20 17:38:25 - app.services.assignment_history_service - WARNING - Asset not found: asst001
2025-05-20 17:38:25 - app.routers.assignment_history - WARNING - Invalid request: Asset with ID asst001 not found
2025-05-20 17:38:25 - app.main - WARNING - Request failed: GET /api/assignment-history/asset/asst001 - Status: 400
2025-05-20 17:39:18 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-20 17:39:18 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-20 17:39:18 - app.main - INFO - Registering routers with prefix /api
2025-05-20 17:39:18 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-20 17:39:18 - app.main - INFO - MongoDB connection verified successfully
2025-05-20 17:39:18 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-20 17:39:19 - app.main - INFO - All database indexes verified
2025-05-20 17:39:19 - app.main - INFO - Server started successfully!
2025-05-20 17:39:19 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-20 17:39:19 - uvicorn.error - ERROR - [Errno 10048] error while attempting to bind on address ('0.0.0.0', 8000): [winerror 10048] only one usage of each socket address (protocol/network address/port) is normally permitted
2025-05-20 17:39:19 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-20 17:39:20 - app.main - INFO - Request: POST /debug/add-sample-asset
2025-05-20 17:39:20 - app.main - WARNING - Request failed: POST /debug/add-sample-asset - Status: 404
2025-05-20 17:39:59 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-20 17:39:59 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-20 17:39:59 - app.main - INFO - Registering routers with prefix /api
2025-05-20 17:40:00 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-20 17:40:00 - app.main - INFO - MongoDB connection verified successfully
2025-05-20 17:40:00 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-20 17:40:00 - app.main - INFO - All database indexes verified
2025-05-20 17:40:00 - app.main - INFO - Server started successfully!
2025-05-20 17:40:00 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-20 17:40:00 - uvicorn.error - ERROR - [Errno 10048] error while attempting to bind on address ('0.0.0.0', 8000): [winerror 10048] only one usage of each socket address (protocol/network address/port) is normally permitted
2025-05-20 17:40:00 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-20 17:40:03 - app.main - INFO - Request: GET /api/asset-items
2025-05-20 17:40:03 - app.main - INFO - Request: GET /api/asset-items/
2025-05-20 17:40:03 - app.routers.asset_items - INFO - Fetching asset items - category_id: None, status: None, has_active_assignment: None, serial_number: None, asset_tag: None, department: None, location: None, maintenance_due_before: None
2025-05-20 17:40:03 - app.services.asset_item_service - INFO - Fetching asset items with filters
2025-05-20 17:40:03 - app.services.asset_item_service - ERROR - Error fetching asset items: 1 validation error for AssetItemResponse
current_assignment_date
  Input should be a valid string [type=string_type, input_value=datetime.datetime(2025, 5, 18, 8, 1, 13, 715000), input_type=datetime]
    For further information visit https://errors.pydantic.dev/2.10/v/string_type
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_item_service.py", line 85, in get_asset_items
    asset_response = AssetItemResponse(**asset)
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 214, in __init__
    validated_self = self.__pydantic_validator__.validate_python(data, self_instance=self)
pydantic_core._pydantic_core.ValidationError: 1 validation error for AssetItemResponse
current_assignment_date
  Input should be a valid string [type=string_type, input_value=datetime.datetime(2025, 5, 18, 8, 1, 13, 715000), input_type=datetime]
    For further information visit https://errors.pydantic.dev/2.10/v/string_type
2025-05-20 17:40:03 - app.routers.asset_items - ERROR - Failed to fetch asset items: 1 validation error for AssetItemResponse
current_assignment_date
  Input should be a valid string [type=string_type, input_value=datetime.datetime(2025, 5, 18, 8, 1, 13, 715000), input_type=datetime]
    For further information visit https://errors.pydantic.dev/2.10/v/string_type
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_items.py", line 97, in read_asset_items
    items = get_asset_items(collection, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_item_service.py", line 85, in get_asset_items
    asset_response = AssetItemResponse(**asset)
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pydantic\main.py", line 214, in __init__
    validated_self = self.__pydantic_validator__.validate_python(data, self_instance=self)
pydantic_core._pydantic_core.ValidationError: 1 validation error for AssetItemResponse
current_assignment_date
  Input should be a valid string [type=string_type, input_value=datetime.datetime(2025, 5, 18, 8, 1, 13, 715000), input_type=datetime]
    For further information visit https://errors.pydantic.dev/2.10/v/string_type
2025-05-20 17:40:03 - app.main - WARNING - Request failed: GET /api/asset-items/ - Status: 500
2025-05-20 17:51:11 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-20 17:51:11 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-20 17:51:11 - app.main - INFO - Registering routers with prefix /api
2025-05-20 17:51:11 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-20 17:51:11 - app.main - INFO - MongoDB connection verified successfully
2025-05-20 17:51:11 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-20 17:51:12 - app.main - INFO - All database indexes verified
2025-05-20 17:51:12 - app.main - INFO - Server started successfully!
2025-05-20 17:51:12 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-20 17:58:04 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 17:58:04 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 17:59:02 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 17:59:02 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 17:59:06 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-20 18:00:49 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-20 18:00:49 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-20 18:00:49 - app.main - INFO - Registering routers with prefix /api
2025-05-20 18:00:49 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-20 18:00:49 - app.main - INFO - MongoDB connection verified successfully
2025-05-20 18:00:49 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-20 18:00:49 - app.main - INFO - All database indexes verified
2025-05-20 18:00:49 - app.main - INFO - Server started successfully!
2025-05-20 18:00:49 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-20 18:00:56 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 18:00:56 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 18:14:34 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 18:14:34 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 19:16:03 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 19:16:03 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 19:17:44 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 19:17:44 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 19:19:07 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 19:19:07 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 19:21:52 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 19:21:52 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 19:41:00 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 19:41:00 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 19:41:01 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 19:41:01 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 19:59:56 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 19:59:56 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 19:59:57 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 19:59:57 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 19:59:59 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 19:59:59 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:00:05 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:00:05 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:00:06 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:00:06 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:00:09 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:00:09 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:01:20 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-20 20:01:29 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-20 20:01:29 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-20 20:01:29 - app.main - INFO - Registering routers with prefix /api
2025-05-20 20:01:30 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-20 20:01:30 - app.main - INFO - MongoDB connection verified successfully
2025-05-20 20:01:30 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-20 20:01:30 - app.main - INFO - All database indexes verified
2025-05-20 20:01:30 - app.main - INFO - Server started successfully!
2025-05-20 20:01:30 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-20 20:01:39 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:01:39 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:01:40 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:01:40 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:01:41 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:01:41 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:04:09 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:04:09 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:04:10 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:04:10 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:04:11 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:04:11 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:08:11 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:08:11 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:08:14 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:08:14 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:08:16 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:08:16 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:08:45 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-20 20:08:55 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-20 20:08:55 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-20 20:08:55 - app.main - INFO - Registering routers with prefix /api
2025-05-20 20:08:55 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-20 20:08:55 - app.main - INFO - MongoDB connection verified successfully
2025-05-20 20:08:55 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-20 20:08:55 - app.main - INFO - All database indexes verified
2025-05-20 20:08:55 - app.main - INFO - Server started successfully!
2025-05-20 20:08:55 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-20 20:09:19 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:09:19 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:09:20 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:09:20 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:09:21 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:09:21 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:11:56 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:11:56 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:11:59 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:11:59 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:12:00 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:12:00 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:10 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:10 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:10 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:10 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:11 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:11 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:11 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:11 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:13 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:13 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:13 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:13 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:20 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:20 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:21 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:21 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:21 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:21 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:22 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:22 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:23 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:23 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:25 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:25 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:32 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:32 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:33 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:33 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:33 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:33 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:34 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:34 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:35 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:35 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:36 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:36 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:42 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:42 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:43 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:43 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:43 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:43 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:44 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:44 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:45 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:45 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:46 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:46 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:54 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:54 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:55 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:55 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:56 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:56 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:56 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:56 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:59 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:59 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:19:59 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:19:59 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:29:23 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-20 20:29:33 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-20 20:29:33 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-20 20:29:33 - app.main - INFO - Registering routers with prefix /api
2025-05-20 20:29:33 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-20 20:29:33 - app.main - INFO - MongoDB connection verified successfully
2025-05-20 20:29:33 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-20 20:29:33 - app.main - INFO - All database indexes verified
2025-05-20 20:29:33 - app.main - INFO - Server started successfully!
2025-05-20 20:29:33 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-20 20:29:41 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:29:41 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:29:42 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:29:42 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-20 20:29:43 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-20 20:29:43 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-21 11:03:03 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-21 11:03:12 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-21 11:03:12 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-21 11:03:12 - app.main - INFO - Registering routers with prefix /api
2025-05-21 11:03:12 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-21 11:03:12 - app.main - INFO - MongoDB connection verified successfully
2025-05-21 11:03:12 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-21 11:03:13 - app.main - INFO - All database indexes verified
2025-05-21 11:03:13 - app.main - INFO - Server started successfully!
2025-05-21 11:03:13 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-21 11:03:38 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-21 11:03:38 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-21 11:03:39 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-21 11:03:39 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-21 11:03:40 - app.main - INFO - Request: GET /api/v1/asset-categories/
2025-05-21 11:03:40 - app.main - WARNING - Request failed: GET /api/v1/asset-categories/ - Status: 404
2025-05-21 11:09:28 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:09:28 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:09:28 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:09:28 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:09:28 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:09:28 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-21 11:09:30 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:09:30 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:09:30 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:09:30 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:09:30 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:09:30 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-21 11:09:32 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:09:32 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:09:32 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:09:32 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:09:32 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:09:32 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-21 11:09:49 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-21 11:09:58 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-21 11:09:58 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-21 11:09:58 - app.main - INFO - Registering routers with prefix /api
2025-05-21 11:09:58 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-21 11:09:58 - app.main - INFO - MongoDB connection verified successfully
2025-05-21 11:09:58 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-21 11:09:59 - app.main - INFO - All database indexes verified
2025-05-21 11:09:59 - app.main - INFO - Server started successfully!
2025-05-21 11:09:59 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-21 11:10:10 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:10:10 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:10:10 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:10:10 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:10:10 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:10:10 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-21 11:10:11 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:10:11 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:10:11 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:10:11 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:10:11 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:10:11 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-21 11:10:12 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:10:12 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:10:12 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:10:12 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:10:12 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:10:12 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-21 11:11:55 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:11:55 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:11:55 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:11:55 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:11:55 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:11:55 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-21 11:11:58 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:11:58 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:11:58 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:11:58 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:11:58 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:11:58 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-21 11:12:01 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:12:01 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:12:01 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:12:01 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:12:01 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:12:01 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-21 11:12:02 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:12:02 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:12:02 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:12:02 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:12:02 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:12:02 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-21 11:12:04 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:12:04 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:12:04 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:12:04 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:12:04 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
    categories = get_asset_categories(db, filters)
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:12:04 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-21 11:14:01 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:14:01 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:14:01 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:14:01 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:14:01 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:14:01 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-21 11:14:02 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:14:02 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:14:02 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:14:02 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:14:02 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:14:02 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-21 11:14:05 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:14:05 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:14:05 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:14:05 - app.services.asset_category_service - ERROR - Error fetching categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:14:05 - app.routers.asset_categories - ERROR - Failed to fetch categories: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
Traceback (most recent call last):
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\routers\asset_categories.py", line 48, in read_asset_categories
  File "C:\Users\devanshu\Downloads\github asset management\my-asset-app\backend\app\services\asset_category_service.py", line 35, in get_asset_categories
    categories = list(db.find(query))
                      ~~~~~~~^^^^^^^
  File "C:\Users\devanshu\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymongo\synchronous\collection.py", line 401, in __call__
    raise TypeError(
    ...<4 lines>...
    )
TypeError: 'Collection' object is not callable. If you meant to call the 'find' method on a 'Database' object it is failing because no such method exists.
2025-05-21 11:14:05 - app.main - WARNING - Request failed: GET /api/asset-categories/ - Status: 500
2025-05-21 11:14:07 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-21 11:14:16 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-21 11:14:16 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-21 11:14:16 - app.main - INFO - Registering routers with prefix /api
2025-05-21 11:14:16 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-21 11:14:16 - app.main - INFO - MongoDB connection verified successfully
2025-05-21 11:14:16 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-21 11:14:16 - app.main - INFO - All database indexes verified
2025-05-21 11:14:16 - app.main - INFO - Server started successfully!
2025-05-21 11:14:16 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-21 11:14:26 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:14:26 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:14:26 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:25:03 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:25:03 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:25:03 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:25:19 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:25:19 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:25:19 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:25:23 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:25:23 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:25:23 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:25:56 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:25:56 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:25:56 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:25:58 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:25:58 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:25:58 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:25:58 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:25:58 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:25:58 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:29:17 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:29:17 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:29:17 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:32:09 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:32:09 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:32:09 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:41:43 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:41:43 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:41:43 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:41:53 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:41:53 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:41:53 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:41:57 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:41:57 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:41:57 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:46:21 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:46:21 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:46:21 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:46:24 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-21 11:46:40 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-21 11:46:40 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-21 11:46:40 - app.main - INFO - Registering routers with prefix /api
2025-05-21 11:46:40 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-21 11:46:40 - app.main - INFO - MongoDB connection verified successfully
2025-05-21 11:46:40 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-21 11:46:40 - app.main - INFO - All database indexes verified
2025-05-21 11:46:40 - app.main - INFO - Server started successfully!
2025-05-21 11:46:40 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-21 11:46:47 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:46:47 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:46:47 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:46:48 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:46:48 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:46:48 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:47:00 - app.main - INFO - Request: PUT /api/asset-categories/958d338a-8828-495f-88c7-04d52049cb8a
2025-05-21 11:47:00 - app.routers.asset_categories - INFO - Updating asset category with ID: 958d338a-8828-495f-88c7-04d52049cb8a
2025-05-21 11:47:00 - app.services.asset_category_service - INFO - Updating category ID: 958d338a-8828-495f-88c7-04d52049cb8a
2025-05-21 11:47:00 - app.main - ERROR - Request failed: PUT /api/asset-categories/958d338a-8828-495f-88c7-04d52049cb8a - Error: 1 validation errors:
  {'type': 'dict_type', 'loc': ('response', 'edit_history', 0), 'msg': 'Input should be a valid dictionary', 'input': EditHistoryEntry(id='9c8c1a9f-603f-480d-8d99-badd29588abb', type='edit', edit_date='2025-05-21', change_type='Category Update', details='Updated category fields: category_name, category_type, description, is_consumable, is_allotted, is_active, is_reassignable, requires_maintenance, assignment_policies, updated_at', notes='Updated via API')}

2025-05-21 11:47:02 - app.main - INFO - Request: PUT /api/asset-categories/958d338a-8828-495f-88c7-04d52049cb8a
2025-05-21 11:47:02 - app.routers.asset_categories - INFO - Updating asset category with ID: 958d338a-8828-495f-88c7-04d52049cb8a
2025-05-21 11:47:02 - app.services.asset_category_service - INFO - Updating category ID: 958d338a-8828-495f-88c7-04d52049cb8a
2025-05-21 11:47:03 - app.main - ERROR - Request failed: PUT /api/asset-categories/958d338a-8828-495f-88c7-04d52049cb8a - Error: 2 validation errors:
  {'type': 'dict_type', 'loc': ('response', 'edit_history', 0), 'msg': 'Input should be a valid dictionary', 'input': EditHistoryEntry(id='9c8c1a9f-603f-480d-8d99-badd29588abb', type='edit', edit_date='2025-05-21', change_type='Category Update', details='Updated category fields: category_name, category_type, description, is_consumable, is_allotted, is_active, is_reassignable, requires_maintenance, assignment_policies, updated_at', notes='Updated via API')}
  {'type': 'dict_type', 'loc': ('response', 'edit_history', 1), 'msg': 'Input should be a valid dictionary', 'input': EditHistoryEntry(id='c5c0969c-b235-4bd3-a852-bf3c114a55f8', type='edit', edit_date='2025-05-21', change_type='Category Update', details='Updated category fields: category_name, category_type, description, is_consumable, is_allotted, is_active, is_reassignable, requires_maintenance, assignment_policies, updated_at', notes='Updated via API')}

2025-05-21 11:47:07 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:47:07 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:47:07 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:47:07 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:47:07 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:47:07 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:47:29 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:47:29 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:47:29 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:47:36 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:47:36 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:47:36 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:47:37 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:47:37 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:47:37 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:48:08 - app.main - INFO - Request: PUT /api/asset-categories/958d338a-8828-495f-88c7-04d52049cb8a
2025-05-21 11:48:08 - app.routers.asset_categories - INFO - Updating asset category with ID: 958d338a-8828-495f-88c7-04d52049cb8a
2025-05-21 11:48:08 - app.services.asset_category_service - INFO - Updating category ID: 958d338a-8828-495f-88c7-04d52049cb8a
2025-05-21 11:48:08 - app.main - ERROR - Request failed: PUT /api/asset-categories/958d338a-8828-495f-88c7-04d52049cb8a - Error: 3 validation errors:
  {'type': 'dict_type', 'loc': ('response', 'edit_history', 0), 'msg': 'Input should be a valid dictionary', 'input': EditHistoryEntry(id='9c8c1a9f-603f-480d-8d99-badd29588abb', type='edit', edit_date='2025-05-21', change_type='Category Update', details='Updated category fields: category_name, category_type, description, is_consumable, is_allotted, is_active, is_reassignable, requires_maintenance, assignment_policies, updated_at', notes='Updated via API')}
  {'type': 'dict_type', 'loc': ('response', 'edit_history', 1), 'msg': 'Input should be a valid dictionary', 'input': EditHistoryEntry(id='c5c0969c-b235-4bd3-a852-bf3c114a55f8', type='edit', edit_date='2025-05-21', change_type='Category Update', details='Updated category fields: category_name, category_type, description, is_consumable, is_allotted, is_active, is_reassignable, requires_maintenance, assignment_policies, updated_at', notes='Updated via API')}
  {'type': 'dict_type', 'loc': ('response', 'edit_history', 2), 'msg': 'Input should be a valid dictionary', 'input': EditHistoryEntry(id='dc28f5d9-aab4-400b-a50c-551b975ff3c6', type='edit', edit_date='2025-05-21', change_type='Category Update', details='Updated category fields: category_name, category_type, description, is_consumable, is_allotted, is_active, is_reassignable, requires_maintenance, assignment_policies, updated_at', notes='Updated via API')}

2025-05-21 11:48:14 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:48:14 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:48:14 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:48:36 - app.main - INFO - Request: DELETE /api/asset-categories/4ffde1a3-b8f6-41c3-8894-ee1385360845
2025-05-21 11:48:36 - app.routers.asset_categories - INFO - Deleting asset category with ID: 4ffde1a3-b8f6-41c3-8894-ee1385360845
2025-05-21 11:48:36 - app.services.asset_category_service - INFO - Deleting category ID: 4ffde1a3-b8f6-41c3-8894-ee1385360845
2025-05-21 11:48:39 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:48:39 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:48:39 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:48:40 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:48:40 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:48:40 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:51:53 - app.main - INFO - Request: PUT /api/asset-categories/958d338a-8828-495f-88c7-04d52049cb8a
2025-05-21 11:51:53 - app.routers.asset_categories - INFO - Updating asset category with ID: 958d338a-8828-495f-88c7-04d52049cb8a
2025-05-21 11:51:53 - app.services.asset_category_service - INFO - Updating category ID: 958d338a-8828-495f-88c7-04d52049cb8a
2025-05-21 11:51:53 - app.main - ERROR - Request failed: PUT /api/asset-categories/958d338a-8828-495f-88c7-04d52049cb8a - Error: 4 validation errors:
  {'type': 'dict_type', 'loc': ('response', 'edit_history', 0), 'msg': 'Input should be a valid dictionary', 'input': EditHistoryEntry(id='9c8c1a9f-603f-480d-8d99-badd29588abb', type='edit', edit_date='2025-05-21', change_type='Category Update', details='Updated category fields: category_name, category_type, description, is_consumable, is_allotted, is_active, is_reassignable, requires_maintenance, assignment_policies, updated_at', notes='Updated via API')}
  {'type': 'dict_type', 'loc': ('response', 'edit_history', 1), 'msg': 'Input should be a valid dictionary', 'input': EditHistoryEntry(id='c5c0969c-b235-4bd3-a852-bf3c114a55f8', type='edit', edit_date='2025-05-21', change_type='Category Update', details='Updated category fields: category_name, category_type, description, is_consumable, is_allotted, is_active, is_reassignable, requires_maintenance, assignment_policies, updated_at', notes='Updated via API')}
  {'type': 'dict_type', 'loc': ('response', 'edit_history', 2), 'msg': 'Input should be a valid dictionary', 'input': EditHistoryEntry(id='dc28f5d9-aab4-400b-a50c-551b975ff3c6', type='edit', edit_date='2025-05-21', change_type='Category Update', details='Updated category fields: category_name, category_type, description, is_consumable, is_allotted, is_active, is_reassignable, requires_maintenance, assignment_policies, updated_at', notes='Updated via API')}
  {'type': 'dict_type', 'loc': ('response', 'edit_history', 3), 'msg': 'Input should be a valid dictionary', 'input': EditHistoryEntry(id='92375412-a9f9-4787-b416-202e605f57e5', type='edit', edit_date='2025-05-21', change_type='Category Update', details='Updated category fields: category_name, category_type, description, is_consumable, is_allotted, is_active, is_reassignable, requires_maintenance, assignment_policies, updated_at', notes='Updated via API')}

2025-05-21 11:52:05 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:52:05 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:52:05 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:52:05 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:52:05 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:52:05 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:55:58 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:55:58 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:55:58 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 11:55:58 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 11:55:58 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 11:55:58 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:02:22 - app.main - INFO - Request: POST /api/asset-categories/
2025-05-21 12:02:22 - app.routers.asset_categories - INFO - Creating asset category: hello world
2025-05-21 12:02:22 - app.services.asset_category_service - INFO - Creating category: hello world
2025-05-21 12:02:23 - app.services.asset_category_service - INFO - Created category with ID: 99f1e373-9e13-4e61-9b58-090a311f1a4f
2025-05-21 12:02:23 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:02:23 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:02:23 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:02:27 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:02:27 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:02:27 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:02:28 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:02:28 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:02:28 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:03:17 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:03:17 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:03:17 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:06:32 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:06:32 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:06:32 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:12:01 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:12:01 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:12:01 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:12:05 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:12:05 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:12:05 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:13:07 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:13:07 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:13:07 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:13:13 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:13:13 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:13:13 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:16:19 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:16:19 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:16:19 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:16:20 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:16:20 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:16:20 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:17:39 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:17:39 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:17:39 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:17:52 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:17:52 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:17:52 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:21:34 - app.main - INFO - Request: PUT /api/asset-categories/99f1e373-9e13-4e61-9b58-090a311f1a4f
2025-05-21 12:21:34 - app.routers.asset_categories - INFO - Updating asset category with ID: 99f1e373-9e13-4e61-9b58-090a311f1a4f
2025-05-21 12:21:34 - app.services.asset_category_service - INFO - Updating category ID: 99f1e373-9e13-4e61-9b58-090a311f1a4f
2025-05-21 12:21:34 - app.main - ERROR - Request failed: PUT /api/asset-categories/99f1e373-9e13-4e61-9b58-090a311f1a4f - Error: 1 validation errors:
  {'type': 'dict_type', 'loc': ('response', 'edit_history', 0), 'msg': 'Input should be a valid dictionary', 'input': EditHistoryEntry(id='e1745554-8478-4f3d-9a8d-2deade1e542c', type='edit', edit_date='2025-05-21', change_type='Category Update', details='Updated category fields: category_name, category_type, description, policies, is_consumable, is_allotted, is_active, is_reassignable, requires_maintenance, assignment_policies, updated_at', notes='Updated via API')}

2025-05-21 12:21:40 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:21:40 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:21:40 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:21:41 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:21:41 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:21:41 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:23:45 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:23:45 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:23:45 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:32:50 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:32:50 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:32:50 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:33:46 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:33:46 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:33:46 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:33:56 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:33:56 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:33:56 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:33:59 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:33:59 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:33:59 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:34:01 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:34:01 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:34:01 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:38:07 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:38:07 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:38:07 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:38:08 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-21 12:38:21 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-21 12:38:21 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-21 12:38:21 - app.main - INFO - Registering routers with prefix /api
2025-05-21 12:38:22 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-21 12:38:22 - app.main - INFO - MongoDB connection verified successfully
2025-05-21 12:38:22 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-21 12:38:22 - app.main - INFO - All database indexes verified
2025-05-21 12:38:22 - app.main - INFO - Server started successfully!
2025-05-21 12:38:22 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-21 12:38:28 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:38:28 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:38:28 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:38:29 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:38:29 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:38:29 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:39:52 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:39:52 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:39:52 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:39:53 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:39:53 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:39:53 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:41:27 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:41:27 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:41:27 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:41:28 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:41:28 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:41:28 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:51:33 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:51:33 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:51:33 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:51:33 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:51:33 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:51:33 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:53:50 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:53:50 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:53:50 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:53:50 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:53:50 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:53:50 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:54:18 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:54:18 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:54:18 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:54:19 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:54:19 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:54:19 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:54:28 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:54:28 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:54:28 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:54:29 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:54:29 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:54:29 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:54:32 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:54:32 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:54:32 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:54:32 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:54:32 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:54:32 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:54:48 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:54:48 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:54:48 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:54:49 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:54:49 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:54:49 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:55:08 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:55:08 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:55:08 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:55:09 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:55:09 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:55:09 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:55:09 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:55:09 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:55:09 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:55:32 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:55:32 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:55:32 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:55:32 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:55:32 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:55:32 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:55:46 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:55:46 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:55:46 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:55:47 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:55:47 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:55:47 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:55:48 - app.main - INFO - ========== APPLICATION SHUTTING DOWN ==========
2025-05-21 12:55:59 - app.main - INFO - Logging configured successfully (level: INFO)
2025-05-21 12:55:59 - app.main - INFO - CORS middleware configured with frontend origins
2025-05-21 12:55:59 - app.main - INFO - Registering routers with prefix /api
2025-05-21 12:55:59 - app.main - INFO - Starting Asset Management API application on port 8000...
2025-05-21 12:55:59 - app.main - INFO - MongoDB connection verified successfully
2025-05-21 12:55:59 - app.main - INFO - Using existing text index: asset_tag_text_category_id_1
2025-05-21 12:55:59 - app.main - INFO - All database indexes verified
2025-05-21 12:55:59 - app.main - INFO - Server started successfully!
2025-05-21 12:55:59 - app.main - INFO - API documentation available at: http://localhost:8000/docs
2025-05-21 12:56:08 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:56:08 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:56:08 - app.services.asset_category_service - INFO - Fetching all asset categories
2025-05-21 12:56:09 - app.main - INFO - Request: GET /api/asset-categories/
2025-05-21 12:56:09 - app.routers.asset_categories - INFO - Fetching asset categories - category_type: None, is_active: None
2025-05-21 12:56:09 - app.services.asset_category_service - INFO - Fetching all asset categories
